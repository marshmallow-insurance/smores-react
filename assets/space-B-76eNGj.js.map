{"version":3,"file":"space-B-76eNGj.js","sources":["../../src/utils/responsiveProp.ts","../../src/utils/space.tsx"],"sourcesContent":["const breakpointToMinPxMapping = {\n  small: 0,\n  medium: 768,\n  large: 1024,\n} satisfies Record<string, number>\n\ntype Breakpoint = keyof typeof breakpointToMinPxMapping\nconst breakpointList = Object.keys(breakpointToMinPxMapping) as Breakpoint[]\n\ntype PropByBreakpoint<PropValue> = Partial<Record<Breakpoint, PropValue>>\nexport type ResponsiveProp<PropValue> = PropValue | PropByBreakpoint<PropValue>\n\nconst isPropByBreakpoint = <PropValue>(\n  value: ResponsiveProp<PropValue>,\n): value is PropByBreakpoint<PropValue> => {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    breakpointList.includes(Object.keys(value)[0] as any)\n  )\n}\n\nexport const resolveResponsiveProp = <PropValue>(\n  value: ResponsiveProp<PropValue>,\n  styleTemplate: (value: PropValue) => string,\n) => {\n  if (!isPropByBreakpoint(value)) {\n    return `\n      @media (min-width: ${breakpointToMinPxMapping.small}px) {\n        ${styleTemplate(value)}\n      }\n    `\n  }\n\n  const breakpointUsed = Object.keys(value) as Breakpoint[]\n\n  let style = ''\n  breakpointUsed.forEach((breakpoint) => {\n    style += `\n        @media (min-width: ${breakpointToMinPxMapping[breakpoint]}px) {\n          ${styleTemplate(value[breakpoint]!)}\n        }\n      `\n  })\n\n  return style\n}\n","import { resolveResponsiveProp, ResponsiveProp } from './responsiveProp'\nimport { TransientProps } from './utilTypes'\n\ntype Spacing = '8px' | '12px' | '16px' | '24px' | '32px' | '48px' | '64px'\n\nexport type SpacingProp = '0' | Spacing | { custom: number | string }\n\nexport const resolveSpacing = (value: SpacingProp | 'auto') => {\n  if (typeof value === 'string') {\n    return value\n  }\n\n  if (typeof value.custom === 'string') {\n    return value.custom\n  }\n\n  return `${value.custom}px`\n}\n\nexport interface MarginProps {\n  m?: ResponsiveProp<SpacingProp>\n  mx?: ResponsiveProp<SpacingProp | 'auto'>\n  my?: ResponsiveProp<SpacingProp>\n  ml?: ResponsiveProp<SpacingProp>\n  mr?: ResponsiveProp<SpacingProp>\n  mt?: ResponsiveProp<SpacingProp>\n  mb?: ResponsiveProp<SpacingProp>\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveProp<SpacingProp>\n  px?: ResponsiveProp<SpacingProp>\n  py?: ResponsiveProp<SpacingProp>\n  pl?: ResponsiveProp<SpacingProp>\n  pr?: ResponsiveProp<SpacingProp>\n  pt?: ResponsiveProp<SpacingProp>\n  pb?: ResponsiveProp<SpacingProp>\n}\n\nexport type TransientMarginProps = TransientProps<MarginProps>\nexport type TransientPaddingProps = TransientProps<PaddingProps>\n\nexport const margin = (props: TransientMarginProps): string => {\n  const { $m, $mx, $my, $ml, $mr, $mt, $mb } = props\n\n  return `\n    ${\n      $m\n        ? resolveResponsiveProp(\n            $m,\n            (value) => `margin: ${resolveSpacing(value)};`,\n          )\n        : ''\n    }\n    ${\n      $mx\n        ? resolveResponsiveProp(\n            $mx,\n            (value) => `\n        margin-left: ${resolveSpacing(value)};\n        margin-right: ${resolveSpacing(value)};\n      `,\n          )\n        : ''\n    }\n    ${\n      $my\n        ? resolveResponsiveProp(\n            $my,\n            (value) => `\n        margin-top: ${resolveSpacing(value)};\n        margin-bottom: ${resolveSpacing(value)};\n      `,\n          )\n        : ''\n    }\n    ${\n      $ml\n        ? resolveResponsiveProp(\n            $ml,\n            (value) => `margin-left: ${resolveSpacing(value)};`,\n          )\n        : ''\n    }\n    ${\n      $mr\n        ? resolveResponsiveProp(\n            $mr,\n            (value) => `margin-right: ${resolveSpacing(value)};`,\n          )\n        : ''\n    }\n    ${\n      $mt\n        ? resolveResponsiveProp(\n            $mt,\n            (value) => `margin-top: ${resolveSpacing(value)};`,\n          )\n        : ''\n    }\n    ${\n      $mb\n        ? resolveResponsiveProp(\n            $mb,\n            (value) => `margin-bottom: ${resolveSpacing(value)};`,\n          )\n        : ''\n    }\n  `\n}\n\nexport const padding = (props: TransientPaddingProps): string => {\n  const { $p, $px, $py, $pl, $pr, $pt, $pb } = props\n\n  return `\n    ${\n      $p\n        ? resolveResponsiveProp(\n            $p,\n            (value) => `padding: ${resolveSpacing(value)};`,\n          )\n        : ''\n    }\n    ${\n      $px\n        ? resolveResponsiveProp(\n            $px,\n            (value) => `\n        padding-left: ${resolveSpacing(value)};\n        padding-right: ${resolveSpacing(value)};\n      `,\n          )\n        : ''\n    }\n    ${\n      $py\n        ? resolveResponsiveProp(\n            $py,\n            (value) => `\n        padding-top: ${resolveSpacing(value)};\n        padding-bottom: ${resolveSpacing(value)};\n      `,\n          )\n        : ''\n    }\n    ${\n      $pl\n        ? resolveResponsiveProp(\n            $pl,\n            (value) => `padding-left: ${resolveSpacing(value)};`,\n          )\n        : ''\n    }\n    ${\n      $pr\n        ? resolveResponsiveProp(\n            $pr,\n            (value) => `padding-right: ${resolveSpacing(value)};`,\n          )\n        : ''\n    }\n    ${\n      $pt\n        ? resolveResponsiveProp(\n            $pt,\n            (value) => `padding-top: ${resolveSpacing(value)};`,\n          )\n        : ''\n    }\n    ${\n      $pb\n        ? resolveResponsiveProp(\n            $pb,\n            (value) => `padding-bottom: ${resolveSpacing(value)};`,\n          )\n        : ''\n    }\n  `\n}\n"],"names":["breakpointToMinPxMapping","cov_22pac96tfs","s","small","medium","large","breakpointList","Object","keys","isPropByBreakpoint","value","f","b","includes","resolveResponsiveProp","styleTemplate","cov_1kggcdeejx","resolveSpacing","custom","margin","props","$m","$mx","$my","$ml","$mr","$mt","$mb"],"mappings":"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"}