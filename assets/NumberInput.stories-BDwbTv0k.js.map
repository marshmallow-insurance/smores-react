{"version":3,"file":"NumberInput.stories-BDwbTv0k.js","sources":["../../src/NumberInput/NumberInput.tsx","../../src/NumberInput/storybook/Collection.tsx","../../src/NumberInput/storybook/Container.tsx"],"sourcesContent":["import React, {\n  FocusEvent,\n  FormEvent,\n  ForwardedRef,\n  MouseEvent,\n  forwardRef,\n} from 'react'\nimport styled from 'styled-components'\n\nimport { Box } from '../Box'\nimport { Icon } from '../Icon'\nimport { Field } from '../fields/Field'\nimport { CommonFieldProps } from '../fields/commonFieldTypes'\n\nimport {\n  Input,\n  StyledFrontIcon,\n  StyledTrailingIcon,\n} from '../fields/components/CommonInput'\nimport { useUniqueId } from '../utils/id'\n\nexport interface Props extends CommonFieldProps {\n  type?: 'number'\n  placeholder: string\n  name?: string\n  value: string\n  onBlur?: (e: FocusEvent<HTMLInputElement>) => void\n  min?: number\n  max?: number\n  step?: number\n}\n\n/** on change or on input required */\ntype InputProps =\n  | {\n      /** on change is required and on input optional */\n      onChange: (e: string | number) => void\n      onInputChange?: (e: FormEvent<HTMLInputElement>) => void\n    }\n  | {\n      /** on input is required and on change optional */\n      onChange?: (e: string | number) => void\n      onInputChange: (e: FormEvent<HTMLInputElement>) => void\n    }\n\nexport type NumberInputProps = Props & InputProps\n\nexport const NumberInput = forwardRef(function NumberInput(\n  {\n    id: idProp,\n    type = 'number',\n    placeholder,\n    name,\n    value,\n    onChange,\n    onInputChange,\n    onBlur,\n    min = -999999,\n    max = 999999,\n    step = 0,\n    disabled = false,\n    error = false,\n    frontIcon,\n    trailingIcon,\n    fallbackStyle,\n    ...fieldProps\n  }: NumberInputProps,\n  ref: ForwardedRef<HTMLInputElement>,\n) {\n  const id = useUniqueId(idProp)\n\n  // Check whether the min/max value exists is within the specified range\n  const isInRange = (value: number) => {\n    if (min && value < min) {\n      return false\n    }\n\n    if (max && value > max) {\n      return false\n    }\n\n    return true\n  }\n\n  // Round the number to two decimal places\n  const roundNumber = (event: number) => {\n    return Math.round(event * 100) / 100\n  }\n\n  const applyMinMax = (value: number) => {\n    if (min && value < min) return min\n    if (max && value > max) return max\n    return value\n  }\n\n  const handleChange = (event: string) => {\n    if (onChange === undefined) return\n    const EMPTY_INPUT = ''\n\n    if (event === EMPTY_INPUT) {\n      onChange(event)\n    } else {\n      const amount = Number(event)\n      const normalisedValue = applyMinMax(amount)\n\n      onChange(normalisedValue)\n    }\n  }\n  // Increment or decrement the value when clicking the Spinner controls\n  const incrementValue = (event: MouseEvent<HTMLButtonElement>) => {\n    if (onChange === undefined) return\n    event.preventDefault()\n    const currentValue = Number(value) + step\n\n    if (isInRange(currentValue)) {\n      onChange(roundNumber(currentValue))\n    }\n  }\n\n  const decrementValue = (event: MouseEvent<HTMLButtonElement>) => {\n    if (onChange === undefined) return\n    event.preventDefault()\n    const currentValue = Number(value) - step\n\n    if (isInRange(currentValue)) {\n      onChange(roundNumber(currentValue))\n    }\n  }\n\n  return (\n    <Field {...fieldProps} htmlFor={id} error={error}>\n      <Box flex alignItems=\"center\" justifyContent=\"flex-start\">\n        {frontIcon && (\n          <StyledFrontIcon\n            $disabled={disabled}\n            render={frontIcon}\n            color=\"sesame\"\n          />\n        )}\n        <Input\n          ref={ref}\n          $error={error}\n          disabled={disabled}\n          type={type}\n          id={id}\n          name={name}\n          placeholder={placeholder}\n          value={value}\n          $frontIcon={frontIcon}\n          step={step}\n          $fallbackStyle={fallbackStyle}\n          onChange={(e: FormEvent<HTMLInputElement>) => {\n            onChange && handleChange(e.currentTarget.value)\n            onInputChange && onInputChange(e)\n          }}\n          onBlur={onBlur}\n        />\n\n        {onChange && step > 0 && (\n          <Spinner>\n            <SpinnerButton\n              aria-label=\"step-up\"\n              onClick={incrementValue}\n              disabled={disabled}\n            >\n              <Icon render=\"caret\" rotate={180} color=\"sesame\" size={24} />\n            </SpinnerButton>\n\n            <SpinnerButton\n              aria-label=\"step-down\"\n              onClick={decrementValue}\n              disabled={disabled}\n            >\n              <Icon render=\"caret\" color=\"sesame\" size={24} />\n            </SpinnerButton>\n          </Spinner>\n        )}\n        {trailingIcon && !step && (\n          <StyledTrailingIcon\n            $disabled={disabled}\n            render={trailingIcon}\n            color=\"sesame\"\n          />\n        )}\n      </Box>\n    </Field>\n  )\n})\n\nconst Spinner = styled.div`\n  position: relative;\n  display: flex;\n  right: 58px;\n  margin-right: -58px;\n`\n\ninterface IButton {\n  disabled: boolean\n}\n\nconst SpinnerButton = styled.button<IButton>`\n  width: 24px;\n  height: 24px;\n  background-color: transparent;\n  border: 0;\n  padding: 0;\n  cursor: ${({ disabled }) => (disabled ? 'not-allowed' : 'pointer')};\n`\n","import React, { FC, ReactNode, useState } from 'react'\nimport styled from 'styled-components'\n\nimport { Box } from '../../Box'\nimport { SupportMessage } from '../../SupportMessage'\nimport { Text } from '../../Text'\nimport { noop } from '../../utils/noop'\nimport { NumberInput, NumberInputProps } from '../NumberInput'\n\nconst variationList: NumberInputProps[] = [\n  {\n    id: 'days',\n    placeholder: '+44 7123 456789',\n    errorMsg: 'This field is required',\n    label: 'Phone number',\n    onChange: noop,\n    onInputChange: noop,\n    onBlur: noop,\n    value: '',\n  },\n]\n\nexport const CollectionPage: FC = () => {\n  const [, setValue] = useState('')\n\n  return (\n    <Box flex direction=\"column\">\n      {variationList.map(({ id, placeholder, errorMsg, label }) => {\n        return (\n          <Box key={id} flex direction=\"column\" mb=\"32px\">\n            <Title tag=\"span\" typo=\"header-medium\">\n              NumberInput variations\n            </Title>\n            <Row label=\"Generic\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                placeholder={placeholder}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Fallback\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                placeholder={placeholder}\n                fallbackStyle={true}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Disabled\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                placeholder={placeholder}\n                disabled={true}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Required\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                required={true}\n                placeholder={placeholder}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Leading Icon\">\n              <NumberInput\n                id={id}\n                label={label}\n                frontIcon=\"iphone\"\n                value=\"\"\n                placeholder={placeholder}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Trailing Icon\">\n              <NumberInput\n                id={id}\n                label={label}\n                trailingIcon=\"iphone\"\n                value=\"\"\n                placeholder={placeholder}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Stepper\">\n              <NumberInput\n                id={id}\n                label={label}\n                step={10}\n                value=\"\"\n                placeholder={placeholder}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Assistive text\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                placeholder={placeholder}\n                assistiveText=\"Some assistive text\"\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Completed\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                placeholder={placeholder}\n                error={false}\n                completed={true}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"As title\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                renderAsTitle={true}\n                placeholder={placeholder}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Error\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                required={true}\n                placeholder={placeholder}\n                assistiveText=\"Some assistive text\"\n                error={true}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"React element error\">\n              <NumberInput\n                id={id}\n                label={label}\n                required={true}\n                value=\"\"\n                placeholder={placeholder}\n                error={true}\n                errorMsg={\n                  <SupportMessage type=\"warning\" description=\"error!!\" />\n                }\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Fallback Error\">\n              <NumberInput\n                id={id}\n                label={label}\n                required={true}\n                value=\"\"\n                placeholder={placeholder}\n                fallbackStyle={true}\n                error={true}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n          </Box>\n        )\n      })}\n    </Box>\n  )\n}\n\nconst Row: FC<{ label: string; children?: ReactNode }> = ({\n  label,\n  children,\n}) => {\n  return (\n    <RowWrapper mt=\"32px\">\n      <Box width=\"140px\">\n        <Text tag=\"span\" typo=\"label-large\">\n          {label}\n        </Text>\n      </Box>\n      {children}\n    </RowWrapper>\n  )\n}\n\nconst RowWrapper = styled(Box)`\n  display: flex;\n  flex-direction: row;\n  gap: 16px;\n`\n\nconst LABEL_WIDTH = '140px'\n\nconst Title = styled(Text)`\n  margin-bottom: 12px;\n  font-size: 18px;\n  line-height: 20px;\n  margin-left: ${LABEL_WIDTH};\n`\n","import React, { useState } from 'react'\n\nimport { NumberInput } from '../NumberInput'\n\nexport const Container = () => {\n  const [value, setValue] = useState('')\n\n  return (\n    <form>\n      <NumberInput\n        id=\"numberInput\"\n        label=\"Amount paid\"\n        name=\"numberInput\"\n        // @ts-expect-error onChange type is too broad and should be handled differently\n        onChange={setValue}\n        placeholder=\"100.00\"\n        value={value}\n        min={-100}\n        max={180}\n        step={10}\n        required\n      />\n    </form>\n  )\n}\n"],"names":["cov_gf688ezr7","path","hash","global","gcv","coverageData","coverage","actualCoverage","NumberInput","s","forwardRef","NumberInput2","id","idProp","type","b","placeholder","name","value","onChange","onInputChange","onBlur","min","max","step","disabled","error","frontIcon","trailingIcon","fallbackStyle","fieldProps","ref","f","useUniqueId","isInRange","value2","roundNumber","event","Math","round","applyMinMax","handleChange","EMPTY_INPUT","amount","Number","normalisedValue","incrementValue","preventDefault","currentValue","decrementValue","React","createElement","Field","htmlFor","Box","flex","alignItems","justifyContent","StyledFrontIcon","$disabled","render","color","Input","$error","cov_13sux65cem","variationList","errorMsg","label","noop","CollectionPage","setValue","useState","direction","map","key","mb","Title","tag","typo","Row","required","assistiveText","completed","renderAsTitle","SupportMessage","description","cov_qo0z99n2t","Container"],"mappings":"kvBA4FA,SAAAA,GAAA,CAAA,IAAAC,EAAA,8EAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,8EAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,KAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,eAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,ccccccAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,KAAA,YAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,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AA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,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"}