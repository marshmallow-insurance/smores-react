{"version":3,"file":"Toggle.stories-ChmCRp8W.js","sources":["../../src/Toggle/Toggle.tsx","../../src/Toggle/storybook/Toggle.stories.tsx"],"sourcesContent":["import React, { FC } from 'react'\nimport styled, { css, useTheme } from 'styled-components'\n\nimport { Box } from '../Box'\nimport { focusOutline } from '../utils/focusOutline'\nimport { MarginProps } from '../utils/space'\nimport {\n  ColorTypes,\n  resolveToThemeColor,\n} from '../ThemeProvider/utils/colourMap'\n\nexport type Props = {\n  /** unique ID */\n  id?: string\n  /** checked flag  */\n  checked: boolean\n  disabled?: boolean\n  /** onToggle listener  */\n  onToggle: () => void\n  bgColor?: ColorTypes\n} & MarginProps\n\nexport const Toggle: FC<Props> = ({\n  id,\n  checked,\n  onToggle,\n  disabled,\n  bgColor,\n  ...marginProps\n}) => {\n  const theme = useTheme()\n\n  const resolvedBgColor = bgColor\n    ? resolveToThemeColor(bgColor, theme)\n    : undefined\n\n  return (\n    <Switch forwardedAs=\"label\" htmlFor={id} {...marginProps}>\n      <Checkbox\n        id={id}\n        disabled={disabled}\n        type=\"checkbox\"\n        checked={checked}\n        onChange={onToggle}\n        $bgColor={resolvedBgColor}\n        onKeyDown={(e) => {\n          if (e.key === 'Enter') {\n            onToggle()\n          }\n        }}\n        aria-label=\"toggle\"\n      />\n      <Slider $disabled={disabled} />\n    </Switch>\n  )\n}\n\nconst Switch = styled(Box)`\n  position: relative;\n  display: inline-block;\n  width: 56px;\n  height: 32px;\n\n  input {\n    opacity: 0;\n    width: 0;\n    height: 0;\n  }\n`\n\nconst Slider = styled.span<{ $disabled?: boolean }>`\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: ${({ theme }) => theme.color.feedback.inactive[100]};\n  border: none;\n  border-radius: 28px;\n  transition: 0.2s background-color;\n  outline: none;\n\n  &:before {\n    position: absolute;\n    content: '';\n    height: 24px;\n    width: 24px;\n    left: 4px;\n    bottom: 4px;\n    background-color: ${({ theme }) => theme.color.surface.base[100]};\n    transition: 0.2s transform;\n    border-radius: 50%;\n  }\n\n  ${({ $disabled }) =>\n    $disabled\n      ? css`\n          cursor: not-allowed;\n        `\n      : css`\n          &:hover {\n            background-color: ${({ theme }) =>\n              theme.color.illustration.neutral[400]};\n          }\n        `}\n`\n\nconst Checkbox = styled.input<{ $bgColor?: string }>`\n  ${focusOutline({ selector: `&:focus-visible + ${Slider}` })}\n\n  &:checked + ${Slider} {\n    background-color: ${({ $bgColor, theme }) =>\n      $bgColor ? $bgColor : theme.color.feedback.positive[200]};\n    border: none;\n  }\n\n  &:checked + ${Slider}:before {\n    transform: translateX(24px);\n  }\n`\n","import { useArgs } from '@storybook/preview-api'\nimport { Meta, StoryObj } from '@storybook/react'\nimport { expect, fn, userEvent, waitFor, within } from '@storybook/test'\nimport React from 'react'\nimport { Props, Toggle } from '../Toggle'\nimport { colourOptions } from '../../utils/storybookHelpers/colourOptions'\n\nconst Render = (args: Props) => {\n  const [{ checked }, updateArgs] = useArgs<Props>()\n\n  function onChange() {\n    args.onToggle()\n    updateArgs({ checked: !checked })\n  }\n\n  return <Toggle {...args} onToggle={onChange} checked={checked} />\n}\n\nconst meta: Meta<typeof Toggle> = {\n  title: 'Toggle',\n  component: Toggle,\n  decorators: [\n    (Story) => (\n      <div style={{ margin: '64px' }}>\n        <Story />\n      </div>\n    ),\n  ],\n  argTypes: {\n    bgColor: {\n      control: 'select',\n      options: colourOptions,\n    },\n  },\n}\n\nexport default meta\n\ntype Story = StoryObj<typeof Toggle>\n\nexport const Primary: Story = {\n  args: {\n    onToggle: fn(),\n    checked: true,\n  },\n  render: Render,\n  play: async ({ args, canvasElement }) => {\n    const canvas = within(canvasElement)\n    const checkbox = canvas.getByRole('checkbox', { name: 'toggle' })\n    await userEvent.click(checkbox)\n    await waitFor(() => expect(args.onToggle).toHaveBeenCalled())\n  },\n}\n\nexport const Disabled: Story = {\n  args: {\n    checked: false,\n    disabled: true,\n  },\n  render: Render,\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement)\n    const checkbox = canvas.getByRole('checkbox', { name: 'toggle' })\n    await userEvent.click(checkbox)\n    await expect(checkbox).toBeDisabled()\n  },\n}\n"],"names":["cov_2bed1qo1sj","actualCoverage","Toggle","checked","onToggle","disabled","bgColor","marginProps","resolvedBgColor","useTheme","resolveToThemeColor","theme","htmlFor","React","Checkbox","type","onChange","$bgColor","onKeyDown","s","$disabled","color","feedback","surface","illustration","focusOutline","styled","selector","Slider","useArgs","Render","args","updateArgs","meta","title","component","decorators","Story","margin","argTypes","control","options","colourOptions","Primary","fn","render","play","canvasElement","checkbox","within","getByRole","name","userEvent","click","waitFor","expect","toHaveBeenCalled","Disabled","toBeDisabled","parameters","docs","source","originalSource"],"mappings":"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"}