{"version":3,"file":"InternalField-4c97c413.js","sources":["../../src/fields/components/InternalField.tsx"],"sourcesContent":["import React, { ReactNode } from 'react'\nimport styled, { css } from 'styled-components'\n\nimport { Text } from '../../Text'\nimport { Box } from '../../Box'\nimport { CommonFieldProps } from '../commonFieldTypes'\nimport { Icon } from '../../Icon'\n\ninterface InternalFieldProps extends CommonFieldProps {\n  children: ReactNode\n  className?: string\n  assistiveText?: string\n  htmlFor?: string\n  fieldType: 'field' | 'fieldset'\n}\n\nexport const InternalField = ({\n  children,\n  fieldType,\n  renderAsTitle,\n  htmlFor,\n  className,\n  label,\n  assistiveText,\n  error,\n  errorMsg,\n  required,\n  completed,\n  ...marginProps\n}: InternalFieldProps) => {\n  const labelTag = fieldType === 'field' ? 'label' : 'legend'\n\n  return (\n    <Container\n      as={fieldType === 'field' ? 'div' : 'fieldset'}\n      className={className}\n      {...marginProps}\n    >\n      {label && (\n        <>\n          {renderAsTitle ? (\n            <Box mb=\"16px\">\n              <Text tag={labelTag} typo=\"heading-small\" htmlFor={htmlFor}>\n                {label}\n              </Text>\n\n              {assistiveText && (\n                <Text tag=\"p\" color=\"sesame\" mt={{ custom: 4 }}>\n                  {assistiveText}\n                </Text>\n              )}\n            </Box>\n          ) : (\n            <Text\n              tag={labelTag}\n              typo=\"label\"\n              color={error ? 'strawberry' : 'sesame'}\n              htmlFor={htmlFor}\n              mb={{ custom: 4 }}\n            >\n              {label}\n              {required && (\n                <Text tag=\"span\" typo=\"body-small\" color=\"strawberry\">\n                  *\n                </Text>\n              )}\n            </Text>\n          )}\n        </>\n      )}\n\n      <Box>{children}</Box>\n      {fieldType === 'field' && assistiveText && !renderAsTitle && (\n        <Text\n          tag={labelTag}\n          typo=\"caption\"\n          color={error ? 'strawberry' : 'sesame'}\n          mt={{ custom: 4 }}\n        >\n          {assistiveText}\n        </Text>\n      )}\n\n      {error &&\n        errorMsg &&\n        (typeof errorMsg === 'string' ? (\n          <Text tag=\"span\" typo=\"caption\" color=\"strawberry\" mt=\"8px\">\n            {errorMsg}\n          </Text>\n        ) : (\n          <Box mt=\"8px\">{errorMsg}</Box>\n        ))}\n\n      {/* When completed is false, whitespace is rendered */}\n      {completed !== undefined && (\n        <AnimationWrapper\n          displayStatus={completed}\n          isError={!!(error && errorMsg)}\n        >\n          <StatusWrapper mt={'8px'}>\n            <Icon render=\"included\" size={16} color=\"apple\" />\n            <Text typo=\"caption\" color=\"apple\">\n              Complete\n            </Text>\n          </StatusWrapper>\n        </AnimationWrapper>\n      )}\n    </Container>\n  )\n}\n\nconst AnimationWrapper = styled(Box)<{\n  displayStatus: boolean\n  isError: boolean\n}>`\n  width: 0;\n  overflow: hidden;\n\n  ${({ displayStatus }) =>\n    displayStatus &&\n    css`\n      transition: width 0.6s ease-in;\n      width: 100%;\n    `}\n\n  /* This enables animation to appear when previous state is error */\n  ${({ isError }) =>\n    isError &&\n    css`\n      height: 0;\n    `}\n`\n\nconst StatusWrapper = styled(Box)`\n  display: flex;\n  align-items: center;\n  gap: 4px;\n`\n\nconst Container = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  width: 100%;\n\n  // In case, the element is a 'fieldset', we remove the border\n  border: 0;\n`\n"],"names":["InternalField","children","fieldType","renderAsTitle","htmlFor","className","label","assistiveText","error","errorMsg","required","completed","marginProps","labelTag","jsxs","Container","jsx","Fragment","Box","Text","AnimationWrapper","StatusWrapper","Icon","styled","displayStatus","css","isError"],"mappings":"gNAgBO,MAAAA,EAAA,CAAA,CAAuB,SAAAC,EAC5B,UAAAC,EACA,cAAAC,EACA,QAAAC,EACA,UAAAC,EACA,MAAAC,EACA,cAAAC,EACA,MAAAC,EACA,SAAAC,EACA,SAAAC,EACA,UAAAC,EACA,GAAAC,CAEF,IAAA,CACE,MAAAC,EAAAX,IAAA,QAAA,QAAA,SAEA,OAAAY,EACEC,EAAC,CAAA,GAAAb,IAAA,QAAA,MAAA,WACqC,UAAAG,EACpC,GAAAO,EACI,SAAA,CAEHN,GAAAU,EAAAC,EAAA,CAAA,SAAAd,EAAAW,EAAAI,EAAA,CAAA,GAAA,OAAA,SAAA,CAIOF,EAAAG,EAAA,CAAA,IAAAN,EAAA,KAAA,gBAAA,QAAAT,EAAA,SAAAE,EAAA,EAEAC,GAAAS,EAAAG,EAAA,CAAA,IAAA,IAAA,MAAA,SAAA,GAAA,CAAA,OAAA,CAAA,EAAA,SAAAZ,CAAA,CAAA,CAKE,CAAA,CAAA,EAAAO,EAIJK,EAAC,CAAA,IAAAN,EACM,KAAA,QACA,MAAAL,EAAA,aAAA,SACyB,QAAAJ,EAC9B,GAAA,CAAA,OAAA,CAAA,EACgB,SAAA,CAEfE,EAAAI,GAAAM,EAAAG,EAAA,CAAA,IAAA,OAAA,KAAA,aAAA,MAAA,aAAA,SAAA,GAAA,CAAA,CAIC,CAAA,CAAA,EAAA,EAIRH,EAAAE,EAAA,CAAA,SAAAjB,EAAA,EAGaC,IAAA,SAAAK,GAAA,CAAAJ,GAAAa,EAEbG,EAAC,CAAA,IAAAN,EACM,KAAA,UACA,MAAAL,EAAA,aAAA,SACyB,GAAA,CAAA,OAAA,CAAA,EACd,SAAAD,CAEf,CAAA,EACHC,GAAAC,IAAA,OAAAA,GAAA,SAAAO,EAAAG,EAAA,CAAA,IAAA,OAAA,KAAA,UAAA,MAAA,aAAA,GAAA,MAAA,SAAAV,CAAA,CAAA,EAAAO,EAAAE,EAAA,CAAA,GAAA,MAAA,SAAAT,CAAA,CAAA,GAU0BE,IAAA,QAAAK,EAK1BI,EAAC,CAAA,cAAAT,EACgB,QAAA,CAAA,EAAAH,GAAAC,GACM,SAAAK,EAAAO,EAAA,CAAA,GAAA,MAAA,SAAA,CAGnBL,EAAAM,EAAA,CAAA,OAAA,WAAA,KAAA,GAAA,MAAA,QAAA,EAAgDN,EAAAG,EAAA,CAAA,KAAA,UAAA,MAAA,QAAA,SAAA,WAAA,CAGhD,EAAA,CACF,CAAA,CACF,CAAA,CAAA,CAIR,EAEAC,EAAAG,EAAAL,CAAA;AAAA;AAAA;AAAA;AAAA,IAAmC,CAAA,CAAA,cAAAM,KAAAA,GAAAC;AAAAA;AAAAA;AAAAA,KAS/B;AAAA;AAAA;AAAA,IAGC,CAAA,CAAA,QAAAC,KAAAA,GAAAD;AAAAA;AAAAA,KAKD;AAAA,EAKJJ,EAAAE,EAAAL,CAAA;AAAA;AAAA;AAAA;AAAA,EAMAH,EAAAQ,EAAAL,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"}