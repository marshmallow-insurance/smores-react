{"version":3,"file":"designSystemColors.stories-CgZzKzLe.js","sources":["../../src/designSystemColors.stories.tsx"],"sourcesContent":["import React from 'react'\nimport styled, { useTheme } from 'styled-components'\n\nimport { colourOptions } from './utils/storybookHelpers/colourOptions'\n\nimport { Box } from './Box'\nimport { Divider } from './Divider'\nimport { Text } from './Text'\nimport { NewColor, resolveToThemeColor } from './ThemeProvider/utils/colourMap'\n\nconst extractColorSections = () => {\n  const sections: { title: string; colors: NewColor[] }[] = []\n\n  const generatePrefix = (color: string) => {\n    if (color.startsWith('color')) {\n      return color.split('.').slice(0, 2).join('.')\n    } else {\n      return color.split('.').slice(0, 1).join('.')\n    }\n  }\n\n  const prefixes = new Set(colourOptions.map((color) => generatePrefix(color)))\n\n  prefixes.forEach((prefix) => {\n    const title = prefix\n      .split('.')\n      .slice(0)\n      .join(' ')\n      .replace(/\\b\\w/g, (c) => c.toUpperCase())\n    const colors = colourOptions.filter((color) =>\n      color.startsWith(prefix),\n    ) as NewColor[]\n    sections.push({ title, colors })\n  })\n\n  return sections\n}\n\nconst ColorCard = ({ colorName }: { colorName: NewColor }) => {\n  const theme = useTheme()\n  const resolvedColor = resolveToThemeColor(colorName, theme)\n\n  return (\n    <ColorCardWrapper width=\"260px\">\n      <ColorBox $colorName={colorName} width=\"100%\" pt={{ custom: '50%' }} />\n      <Divider />\n      <Box px=\"16px\" py={{ custom: 4 }} flex direction=\"column\">\n        <Text tag=\"span\" typo=\"body-regular\">\n          {colorName}\n        </Text>\n        <Text tag=\"span\" typo=\"caption\" color=\"sesame\">\n          {resolvedColor.toUpperCase()}\n        </Text>\n      </Box>\n    </ColorCardWrapper>\n  )\n}\n\nconst ColorSection = ({\n  title,\n  colors,\n}: {\n  title: string\n  colors: Readonly<NewColor[]>\n}) => {\n  return (\n    <Box width=\"100%\">\n      <Box mb=\"16px\">\n        <Text tag=\"span\" typo=\"headline-small\">\n          {title}\n        </Text>\n      </Box>\n      <ColorList>\n        {colors.map((colorName) => (\n          <ColorCard key={colorName} colorName={colorName} />\n        ))}\n      </ColorList>\n    </Box>\n  )\n}\n\nconst ColorsPage = () => {\n  return (\n    <PageWrapper>\n      {extractColorSections().map((section) => (\n        <ColorSection\n          key={section.title}\n          title={section.title}\n          colors={section.colors}\n        />\n      ))}\n    </PageWrapper>\n  )\n}\n\nexport default {\n  title: 'Foundation/Design System Colors',\n  components: ColorsPage,\n}\n\nconst Template = () => <ColorsPage />\n\nexport const List = Template.bind({})\n\nconst ColorList = styled(Box)`\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  gap: 16px;\n`\n\nconst PageWrapper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n`\n\nconst ColorCardWrapper = styled(Box)`\n  background-color: ${({ theme }) => theme.color.surface.base['000']};\n  border: 1px solid ${({ theme }) => theme.color.feedback.inactive[100]};\n  border-radius: 8px;\n  overflow: hidden;\n`\n\nconst ColorBox = styled(Box)<{ $colorName: string }>`\n  background-color: ${({ $colorName, theme }) =>\n    resolveToThemeColor($colorName as NewColor, theme)};\n`\n"],"names":["extractColorSections","sections","generatePrefix","color","startsWith","split","slice","join","prefixes","Set","colourOptions","map","forEach","prefix","title","replace","c","toUpperCase","colors","filter","push","ColorCard","colorName","theme","useTheme","resolvedColor","resolveToThemeColor","React","ColorCardWrapper","ColorBox","custom","Divider","Box","Text","ColorSection","ColorList","ColorsPage","PageWrapper","section","designSystemColors_stories","components","Template","List","bind","styled","surface","base","feedback","inactive","$colorName","parameters","docs","source","originalSource"],"mappings":"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"}