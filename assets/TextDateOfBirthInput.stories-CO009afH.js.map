{"version":3,"file":"TextDateOfBirthInput.stories-CO009afH.js","sources":["../../node_modules/date-fns/addMonths.js","../../node_modules/date-fns/addYears.js","../../node_modules/date-fns/subYears.js","../../src/TextInput/index.ts","../../src/utils/dateOfBirth/dateOfBirthValidator.utils.ts","../../src/utils/dateOfBirth/schema.ts","../../src/TextDateOfBirthInput/TextDateOfBirthInput.tsx","../../src/TextDateOfBirthInput/storybook/TextDateOfBirthInput.stories.tsx"],"sourcesContent":["import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addMonths} function options.\n */\n\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of months to be added.\n * @param options - The options object\n *\n * @returns The new date with the months added\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n *\n * // Add one month to 30 January 2023:\n * const result = addMonths(new Date(2023, 0, 30), 1)\n * //=> Tue Feb 28 2023 00:00:00\n */\nexport function addMonths(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return _date;\n  }\n  const dayOfMonth = _date.getDate();\n\n  // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n  const endOfDesiredMonth = constructFrom(options?.in || date, _date.getTime());\n  endOfDesiredMonth.setMonth(_date.getMonth() + amount + 1, 0);\n  const daysInMonth = endOfDesiredMonth.getDate();\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    _date.setFullYear(\n      endOfDesiredMonth.getFullYear(),\n      endOfDesiredMonth.getMonth(),\n      dayOfMonth,\n    );\n    return _date;\n  }\n}\n\n// Fallback for modularized imports:\nexport default addMonths;\n","import { addMonths } from \"./addMonths.js\";\n\n/**\n * The {@link addYears} function options.\n */\n\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type.\n *\n * @param date - The date to be changed\n * @param amount - The amount of years to be added.\n * @param options - The options\n *\n * @returns The new date with the years added\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * const result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\nexport function addYears(date, amount, options) {\n  return addMonths(date, amount * 12, options);\n}\n\n// Fallback for modularized imports:\nexport default addYears;\n","import { addYears } from \"./addYears.js\";\n\n/**\n * The {@link subYears} function options.\n */\n\n/**\n * @name subYears\n * @category Year Helpers\n * @summary Subtract the specified number of years from the given date.\n *\n * @description\n * Subtract the specified number of years from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of years to be subtracted.\n * @param options - An object with options\n *\n * @returns The new date with the years subtracted\n *\n * @example\n * // Subtract 5 years from 1 September 2014:\n * const result = subYears(new Date(2014, 8, 1), 5)\n * //=> Tue Sep 01 2009 00:00:00\n */\nexport function subYears(date, amount, options) {\n  return addYears(date, -amount, options);\n}\n\n// Fallback for modularized imports:\nexport default subYears;\n","export { TextInput } from './TextInput'\n","import { isAfter, subYears } from 'date-fns'\n\nimport { DateObject } from '../../TextDateOfBirthInput'\n\nconst dateFields = ['day', 'month', 'year'] as const\n\nexport const monthsArray = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n]\n\nexport const validators: Record<\n  (typeof dateFields)[number],\n  (dateField: string | undefined | null) => boolean\n> = {\n  day: (day) => {\n    const dayNumber = Number(day)\n    return Boolean(day && dayNumber >= 1 && dayNumber <= 31)\n  },\n  month: (month) => {\n    const monthNumber = Number(month)\n    return Boolean(month && monthNumber >= 1 && monthNumber <= 12)\n  },\n  year: (year) => {\n    const yearNumber = Number(year)\n    return Boolean(year && yearNumber && year.length === 4 && yearNumber > 0)\n  },\n}\n\nexport const isAllowedValue = (value: string | null | undefined) => {\n  return value === null || (value && /^\\d+$/.test(value)) || value === ''\n}\n\nexport const getInvalidInputFields = (dateObject: DateObject) => {\n  const invalidValues = dateFields.filter((field) => {\n    const value = dateObject[field]\n    return !isAllowedValue(value)\n  })\n\n  return invalidValues\n}\n\nexport const getMissingFields = (dateObject: DateObject) => {\n  const missingFields = dateFields.filter((field) => {\n    return !dateObject[field]\n  })\n\n  return missingFields\n}\n\nexport const getImpossibleFields = (dateObject: DateObject) => {\n  const impossibleValues = dateFields.filter((field) => {\n    return !validators[field](dateObject[field])\n  })\n\n  return impossibleValues\n}\n\nexport const humanReadableJoin = (arr: string[]): string => {\n  if (arr.length === 0) {\n    return ''\n  } else if (arr.length === 1) {\n    return arr[0]\n  } else if (arr.length === 2) {\n    return `${arr[0]} and ${arr[1]}`\n  } else {\n    const last = arr.pop()\n    return `${arr.join(', ')} and ${last}`\n  }\n}\n\nexport const createMissingFieldErrorMessage = (missingFields: string[]) => {\n  const beginning = 'Date of birth must include '\n  const orderedMissingFields = ['day', 'month', 'year'].filter((field) =>\n    missingFields.includes(field),\n  )\n\n  return beginning + humanReadableJoin(orderedMissingFields)\n}\n\nexport const createImpossibleFieldErrorMessage = (\n  impossibleFields: string[],\n) => {\n  const beginning = 'Please enter a valid '\n  const orderedImpossibleFields = ['day', 'month', 'year'].filter((field) =>\n    impossibleFields.includes(field),\n  )\n\n  return beginning + humanReadableJoin(orderedImpossibleFields)\n}\n\nexport const createYoungerThan17ErrorMessage = () => {\n  const comparisonDate = subYears(new Date(), 17)\n\n  return `Please enter a date of birth on or before ${comparisonDate.getDate()} ${monthsArray[comparisonDate.getMonth()]} ${comparisonDate.getFullYear()}`\n}\n\nexport const error = <T>(\n  type: T,\n  fields?: string[],\n): {\n  error: T\n  fields?: string[]\n} => {\n  return { error: type, fields }\n}\n\nexport const is17YearsOld = (date: Date) => {\n  const comparisonDate = subYears(new Date(), 17)\n\n  return !isAfter(date, comparisonDate)\n}\n","import {\n  createImpossibleFieldErrorMessage,\n  createMissingFieldErrorMessage,\n  createYoungerThan17ErrorMessage,\n} from './dateOfBirthValidator.utils'\n\nexport enum InputValidationError {\n  RealDateError = 'realDateError',\n  DateBefore1900Error = 'dateBefore1900Error',\n  YoungerThan17 = 'youngerThan17',\n}\n\nexport enum FieldValidationError {\n  MissingFieldError = 'missingFieldError',\n  InvalidInputValueError = 'invalidInputValueError',\n  ImpossibleFieldValueError = 'impossibleFieldValueError',\n}\n\nexport const dateOfBirthErrorMessages: Record<\n  InputValidationError | FieldValidationError,\n  (value: string[]) => string\n> = {\n  [InputValidationError.RealDateError]: () =>\n    'Please enter a valid date of birth',\n  [InputValidationError.DateBefore1900Error]: () =>\n    'Please enter a date of birth after 1900',\n  [FieldValidationError.MissingFieldError]: createMissingFieldErrorMessage,\n  [FieldValidationError.InvalidInputValueError]: () =>\n    'Please enter a numeric value',\n  [FieldValidationError.ImpossibleFieldValueError]:\n    createImpossibleFieldErrorMessage,\n  [InputValidationError.YoungerThan17]: createYoungerThan17ErrorMessage,\n}\n","import React, { forwardRef } from 'react'\nimport styled from 'styled-components'\n\nimport { Box } from '../Box'\nimport { Fieldset, FieldsetProps } from '../fields/Fieldset'\nimport { TextInput } from '../TextInput'\nimport { InputValidationError } from '../utils/dateOfBirth/schema'\n\nexport type DateObject = {\n  day?: string | null\n  month?: string | null\n  year?: string | null\n}\n\nexport type TextDateOfBirthInputProps = {\n  value: DateObject\n  onChange: (value: DateObject) => void\n  showCompleted?: boolean\n  hookformError?: {\n    type: string\n    message?: string\n  }\n  dataTestId?: string\n} & Pick<FieldsetProps, 'label' | 'assistiveText'>\n\n/**\n * Renders a set of input fields to collect a date of birth as separate day, month,\n * and year fields.\n *\n * ### Date of birth input validations\n * - All fields are present and correctly formatted.\n * - The age is at least 17 years old.\n * - The year is not before 1900.\n */\nexport const TextDateOfBirthInput = forwardRef<\n  HTMLInputElement,\n  TextDateOfBirthInputProps\n>(function TextDateOfBirthInput(\n  {\n    onChange,\n    value,\n    label,\n    assistiveText,\n    hookformError,\n    showCompleted = false,\n    dataTestId,\n  },\n  ref,\n) {\n  const inputValidationErrorValues = Object.values(InputValidationError)\n\n  return (\n    <Fieldset\n      label={label}\n      assistiveText={assistiveText}\n      completed={\n        showCompleted && Boolean(value.day && value.month && value.year)\n      }\n      error={Boolean(hookformError)}\n      errorMsg={hookformError?.message}\n      data-testid={dataTestId}\n    >\n      <Box flex gap=\"16px\">\n        <SetWidthTextInput\n          ref={ref}\n          label=\"day\"\n          autoCompleteAttr=\"bday-day\"\n          inputModeAttr=\"numeric\"\n          $width={60}\n          value={value.day || ''}\n          placeholder=\"\"\n          onChange={(day) => {\n            onChange({\n              ...value,\n              day,\n            })\n          }}\n          error={Boolean(\n            hookformError?.type?.includes('day') ||\n              (hookformError?.type &&\n                inputValidationErrorValues.includes(\n                  hookformError.type as InputValidationError,\n                )),\n          )}\n        />\n        <SetWidthTextInput\n          label=\"month\"\n          autoCompleteAttr=\"bday-month\"\n          inputModeAttr=\"numeric\"\n          $width={60}\n          value={value.month || ''}\n          placeholder=\"\"\n          onChange={(month) => {\n            onChange({\n              ...value,\n              month,\n            })\n          }}\n          error={Boolean(\n            hookformError?.type?.includes('month') ||\n              (hookformError?.type &&\n                inputValidationErrorValues.includes(\n                  hookformError.type as InputValidationError,\n                )),\n          )}\n        />\n        <SetWidthTextInput\n          label=\"year\"\n          autoCompleteAttr=\"bday-year\"\n          inputModeAttr=\"numeric\"\n          $width={80}\n          value={value.year || ''}\n          placeholder=\"\"\n          onChange={(year) => {\n            onChange({\n              ...value,\n              year,\n            })\n          }}\n          error={Boolean(\n            hookformError?.type?.includes('year') ||\n              (hookformError?.type &&\n                inputValidationErrorValues.includes(\n                  hookformError.type as InputValidationError,\n                )),\n          )}\n        />\n      </Box>\n    </Fieldset>\n  )\n})\n\nconst SetWidthTextInput = styled(TextInput)<{ $width: number }>`\n  width: ${({ $width }) => `${$width}px`};\n`\n","import { Meta, StoryObj } from '@storybook/react'\nimport { noop } from '../../utils/noop'\nimport { TextDateOfBirthInput } from '../TextDateOfBirthInput'\n\nconst meta: Meta<typeof TextDateOfBirthInput> = {\n  title: 'Text Date Of Birth Input',\n  component: TextDateOfBirthInput,\n  argTypes: { onChange: { action: 'changed' } },\n}\n\nexport default meta\ntype Story = StoryObj<typeof TextDateOfBirthInput>\n\nexport const Default: Story = {\n  args: {\n    value: { day: '01', month: '01', year: '2000' },\n    onChange: noop,\n  },\n}\n\nexport const WithCompleteStatus: Story = {\n  args: {\n    value: { day: '01', month: '01', year: '2000' },\n    onChange: noop,\n    showCompleted: true,\n  },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [{ id: 'color-contrast', enabled: false }],\n      },\n    },\n  },\n}\n\nexport const EmptyFieldsError: Story = {\n  args: {\n    value: { day: '', month: '', year: '' },\n    onChange: noop,\n    hookformError: {\n      type: 'day, month, year',\n      message:\n        'Date of birth must include day, month, and year (day-month-year)',\n    },\n  },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [{ id: 'color-contrast', enabled: false }],\n      },\n    },\n  },\n}\n\nexport const NumericValueError: Story = {\n  args: {\n    value: { day: 'a', month: '12', year: '1999' },\n    onChange: noop,\n    hookformError: {\n      type: 'day',\n      message: 'Please enter a numeric value (day)',\n    },\n  },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [{ id: 'color-contrast', enabled: false }],\n      },\n    },\n  },\n}\n\nexport const YoungerThan17Error: Story = {\n  args: {\n    value: { day: '12', month: '12', year: '2012' },\n    onChange: noop,\n    hookformError: {\n      type: 'day, month, year',\n      message: 'Please enter a date of birth on or before 7 November 2007',\n    },\n  },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [{ id: 'color-contrast', enabled: false }],\n      },\n    },\n  },\n}\n\nexport const DayMonthError: Story = {\n  args: {\n    value: { day: '42', month: '13', year: '2000' },\n    onChange: noop,\n    hookformError: {\n      type: 'day, month',\n      message: 'Please enter a valid day and month (day-month)',\n    },\n  },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [{ id: 'color-contrast', enabled: false }],\n      },\n    },\n  },\n}\n\nexport const YearError: Story = {\n  args: {\n    value: { day: '12', month: '12', year: '1899' },\n    onChange: noop,\n    hookformError: {\n      type: 'day, month, year',\n      message: 'Please enter a date of birth after 1900',\n    },\n  },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [{ id: 'color-contrast', enabled: false }],\n      },\n    },\n  },\n}\n"],"names":["addMonths","date","amount","options","_date","toDate","constructFrom","dayOfMonth","endOfDesiredMonth","daysInMonth","addYears","subYears","cov_14mjpsknu5","actualCoverage","cov_2d1jvowew8","path","hash","global","gcv","coverageData","coverage","s","monthsArray","humanReadableJoin","arr","f","length","b","last","pop","join","createMissingFieldErrorMessage","missingFields","beginning","orderedMissingFields","filter","field","includes","InputValidationError","cov_whtwihtk9","FieldValidationError","cov_1pyrtp8zn8","TextDateOfBirthInput","forwardRef","onChange","value","label","assistiveText","hookformError","showCompleted","dataTestId","ref","inputValidationErrorValues","Object","values","React","createElement","Fieldset","completed","Boolean","day","month","year","error","errorMsg","message","Box","flex","gap","SetWidthTextInput","autoCompleteAttr","inputModeAttr","$width","placeholder","type","meta","title","component","argTypes","action","Default","args","noop","WithCompleteStatus","parameters","a11y","config","rules","id","enabled","EmptyFieldsError","NumericValueError","YoungerThan17Error","DayMonthError","YearError","docs","source","originalSource"],"mappings":"ovBAiCO,SAASA,GAAUC,EAAMC,EAAQC,EAAS,CAC/C,MAAMC,EAAQC,GAAOJ,EAAME,GAAA,YAAAA,EAAS,EAAE,EACtC,GAAI,MAAMD,CAAM,EAAG,OAAOI,EAA6BL,EAAM,GAAG,EAKhE,MAAMM,EAAaH,EAAM,QAAS,EAU5BI,EAAoBF,EAA6BL,EAAMG,EAAM,QAAO,CAAE,EAC5EI,EAAkB,SAASJ,EAAM,SAAU,EAAGF,EAAS,EAAG,CAAC,EAC3D,MAAMO,EAAcD,EAAkB,QAAS,EAC/C,OAAID,GAAcE,EAGTD,GASPJ,EAAM,YACJI,EAAkB,YAAa,EAC/BA,EAAkB,SAAU,EAC5BD,CACD,EACMH,EAEX,CC5CO,SAASM,GAAST,EAAMC,EAAQC,EAAS,CAC9C,OAAOH,GAAUC,EAAMC,EAAS,GAAIC,CAAO,CAC7C,CCFO,SAASQ,GAASV,EAAMC,EAAQC,EAAS,CAC9C,OAAOO,GAAST,EAAM,CAACC,EAAQC,CAAO,CACxC,smBC9BA,OAAAS,EAAA,UAAA,CAAA,OAAAC,CAAA,EAAAA,CAAA,CAAAD,EAAA,EC2BI,SAAAE,GAAA,CAAA,IAAAC,EAAA,kGAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,kGAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,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,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,eAAA,CAAA,QAAA,EAAA,KAAA,KAAA,QAAA,CAAA,+FAAA,EAAA,MAAA,CAAA,sBAAA,EAAA,SAAA,ojDAAA,EAAA,gBAAA,2CAAA,KAAA,0CAAA,EAAAC,EAAAH,EAAAC,CAAA,IAAAD,EAAAC,CAAA,EAAA,CAAA,IAAA,CAAAE,EAAAL,CAAA,GAAAK,EAAAL,CAAA,EAAA,OAAAC,KAAAI,EAAAL,CAAA,EAAAI,GAAA,IAAAN,EAAAO,EAAAL,CAAA,EAAA0B,OAAAA,EAAA,UAAA,CAAA,OAAA5B,CAAA,EAAAA,CAAA,CAAA4B,EAAA,EAhBC,MAAAC,GAAAD,EAAA,EAAApB,EAAoBsB,CAAAA,IAAAA,EAAA,WAGT,SAAA,CAEPC,SAAAA,EAAAC,MAAAA,EAEJC,MAAAA,EAAAC,cAAAA,EACOC,cAAAA,EAG0BC,cAAAA,GAAAR,IAAAd,EAAA,CAAA,EAAA,CAAA,IACX,IAChBuB,WAAAA,CACN,EAAAC,EAAA,WAAAV,IAAAhB,EAAA,CAAA,IAED,MAAA2B,GAAAX,IAAApB,EAAA,CAAA,IAAAgC,OAAAC,OAAAhB,CAAA,GAAAG,OAAAA,IAAApB,EAAA,CAAA,IACOkC,EAAAC,cAAAC,GACWX,CAAAA,MAAAA,EACHC,cAAAA,EAEdW,WACAjB,IAAAd,EAAA,CAAA,EAAA,CAAA,IAAAsB,IAAAR,EAAA,EAAAd,EAAA,CAAA,EAAA,CAAA,IAAYgC,GAAAlB,IAAAd,EAAA,CAAA,EAAA,CAAA,IAAAkB,EAAAe,MAAAnB,EAAA,EAAAd,EAAA,CAAA,EAAA,CAAA,IAAAkB,EAAAgB,SAAApB,IAAAd,EAAA,CAAA,EAAA,CAAA,IAAAkB,EAAAiB,SAEDC,MAAAJ,EAAAX,EAAAgB,SACJhB,GAAAA,YAAAA,EAAAiB,QACH,cAAAf,CAAA,EAEJK,EAAAC,cAAAU,GAAAC,CAAAA,KAAA,GAAAC,IAAA,MACA,EAAAb,EAAAC,cAAOa,EAAA,CACLlB,IAAAA,EAE+BL,MACX,MAChBwB,iBAAA,WACNC,cAAA,UAAAC,OAAA,GAEF3B,OAAAJ,EAAA,EAAAd,EAAA,CAAA,EAAA,CAAA,IAAAkB,EAAAe,MAAAnB,EAAA,EAAAd,EAAA,CAAA,EAAA,CAAA,IAAA,KAAC8C,YAAA,GAAA7B,SAAAgB,GAAA,CAAAnB,EAAAhB,EAAAA,EAAAgB,CAAAA,IAAAA,EAAApB,EAAAA,EACOuB,CAAAA,IAAAA,EAAA,CACW,GAAAC,EACHe,IAAAA,CACN,CAAA,CACR,EACYG,MAAAJ,GACZlB,IAAAd,EAAA,CAAA,EAAA,CAAA,MAAAqB,EAAAA,GAAAA,YAAAA,EAAoB0B,OAApB1B,YAAAA,EAAoBX,SAAA,UACTI,EAAA,EAAAd,EAAA,CAAA,EAAA,CAAA,KAAAqB,GAAAA,YAAAA,EAAA0B,QAAAjC,IAAAd,EAAA,CAAA,EAAA,CAAA,IACJyB,EAAAf,SACHW,EAAA0B,IACD,IAEH,CAAA,EAAOnB,EAAAC,cAAAa,EAAA,CAG0BvB,MACX,QAChBwB,iBAAA,aACNC,cAAA,UAAAC,OAAA,GAEJ3B,OAAAJ,EAAAd,EAAAA,EAAAkB,CAAAA,EAAAA,CAAAA,IAAAA,EAAAgB,QAAApB,EAAA,EAAAd,EAAA,CAAA,EAAA,CAAA,IAAA,KACF8C,YAAA,GAEH7B,SAAAiB,GAAA,CAAApB,EAAA,EAAAhB,EAAAgB,CAAAA,IAAAA,IAAApB,EAEKuB,CAAAA,IAAAA,EAAA,CACQ,GAAAC,EAA0BgB,MAAAA;;;;;;;;4JCjIxC,MAAMc,GAA0C,CAC9CC,MAAO,2BACPC,UAAWnC,EACXoC,SAAU,CAAElC,SAAU,CAAEmC,OAAQ,SAAA,CAAU,CAC5C,EAKaC,EAAiB,CAC5BC,KAAM,CACJpC,MAAO,CAAEe,IAAK,KAAMC,MAAO,KAAMC,KAAM,MAAO,EAC9ClB,SAAUsC,CAAAA,CAEd,EAEaC,EAA4B,CACvCF,KAAM,CACJpC,MAAO,CAAEe,IAAK,KAAMC,MAAO,KAAMC,KAAM,MAAO,EAC9ClB,SAAUsC,EACVjC,cAAe,EACjB,EACAmC,WAAY,CACVC,KAAM,CACJC,OAAQ,CACNC,MAAO,CAAC,CAAEC,GAAI,iBAAkBC,QAAS,EAAO,CAAA,CAAA,CAClD,CACF,CAEJ,EAEaC,EAA0B,CACrCT,KAAM,CACJpC,MAAO,CAAEe,IAAK,GAAIC,MAAO,GAAIC,KAAM,EAAG,EACtClB,SAAUsC,EACVlC,cAAe,CACb0B,KAAM,mBACNT,QACE,kEAAA,CAEN,EACAmB,WAAY,CACVC,KAAM,CACJC,OAAQ,CACNC,MAAO,CAAC,CAAEC,GAAI,iBAAkBC,QAAS,EAAO,CAAA,CAAA,CAClD,CACF,CAEJ,EAEaE,EAA2B,CACtCV,KAAM,CACJpC,MAAO,CAAEe,IAAK,IAAKC,MAAO,KAAMC,KAAM,MAAO,EAC7ClB,SAAUsC,EACVlC,cAAe,CACb0B,KAAM,MACNT,QAAS,oCAAA,CAEb,EACAmB,WAAY,CACVC,KAAM,CACJC,OAAQ,CACNC,MAAO,CAAC,CAAEC,GAAI,iBAAkBC,QAAS,EAAO,CAAA,CAAA,CAClD,CACF,CAEJ,EAEaG,EAA4B,CACvCX,KAAM,CACJpC,MAAO,CAAEe,IAAK,KAAMC,MAAO,KAAMC,KAAM,MAAO,EAC9ClB,SAAUsC,EACVlC,cAAe,CACb0B,KAAM,mBACNT,QAAS,2DAAA,CAEb,EACAmB,WAAY,CACVC,KAAM,CACJC,OAAQ,CACNC,MAAO,CAAC,CAAEC,GAAI,iBAAkBC,QAAS,EAAO,CAAA,CAAA,CAClD,CACF,CAEJ,EAEaI,EAAuB,CAClCZ,KAAM,CACJpC,MAAO,CAAEe,IAAK,KAAMC,MAAO,KAAMC,KAAM,MAAO,EAC9ClB,SAAUsC,EACVlC,cAAe,CACb0B,KAAM,aACNT,QAAS,gDAAA,CAEb,EACAmB,WAAY,CACVC,KAAM,CACJC,OAAQ,CACNC,MAAO,CAAC,CAAEC,GAAI,iBAAkBC,QAAS,EAAO,CAAA,CAAA,CAClD,CACF,CAEJ,EAEaK,EAAmB,CAC9Bb,KAAM,CACJpC,MAAO,CAAEe,IAAK,KAAMC,MAAO,KAAMC,KAAM,MAAO,EAC9ClB,SAAUsC,EACVlC,cAAe,CACb0B,KAAM,mBACNT,QAAS,yCAAA,CAEb,EACAmB,WAAY,CACVC,KAAM,CACJC,OAAQ,CACNC,MAAO,CAAC,CAAEC,GAAI,iBAAkBC,QAAS,EAAO,CAAA,CAAA,CAClD,CACF,CAEJ,YAAAT,EAAAI,WAAA,CAAA,GAAAJ,EAAAI,WAAAW,KAAA,CAAA,IAAAf,EAAAA,EAAAI,aAAAJ,YAAAA,EAAAe,KAAAC,OAAA,CAAAC,eAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,IAAAjB,GAAAA,EAAAA,EAAAI,aAAAJ,YAAAA,EAAAe,OAAAf,YAAAA,EAAAgB,MAAAA,CAAA,CAAA,YAAAb,EAAAC,WAAA,CAAA,GAAAD,EAAAC,WAAAW,KAAA,CAAA,IAAAZ,EAAAA,EAAAC,aAAAD,YAAAA,EAAAY,KAAAC,OAAA,CAAAC,eAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,IAAAd,GAAAA,EAAAA,EAAAC,aAAAD,YAAAA,EAAAY,OAAAZ,YAAAA,EAAAa,MAAAA,CAAA,CAAA,YAAAN,EAAAN,WAAA,CAAA,GAAAM,EAAAN,WAAAW,KAAA,CAAA,IAAAL,EAAAA,EAAAN,aAAAM,YAAAA,EAAAK,KAAAC,OAAA,CAAAC,eAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,IAAAP,GAAAA,EAAAA,EAAAN,aAAAM,YAAAA,EAAAK,OAAAL,YAAAA,EAAAM,MAAAA,CAAA,CAAA,YAAAL,EAAAP,WAAA,CAAA,GAAAO,EAAAP,WAAAW,KAAA,CAAA,IAAAJ,EAAAA,EAAAP,aAAAO,YAAAA,EAAAI,KAAAC,OAAA,CAAAC,eAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,IAAAN,GAAAA,EAAAA,EAAAP,aAAAO,YAAAA,EAAAI,OAAAJ,YAAAA,EAAAK,MAAAA,CAAA,CAAA,YAAAJ,EAAAR,WAAA,CAAA,GAAAQ,EAAAR,WAAAW,KAAA,CAAA,IAAAH,EAAAA,EAAAR,aAAAQ,YAAAA,EAAAG,KAAAC,OAAA,CAAAC,eAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,IAAAL,GAAAA,EAAAA,EAAAR,aAAAQ,YAAAA,EAAAG,OAAAH,YAAAA,EAAAI,MAAAA,CAAA,CAAA,YAAAH,EAAAT,WAAA,CAAA,GAAAS,EAAAT,WAAAW,KAAA,CAAA,IAAAF,EAAAA,EAAAT,aAAAS,YAAAA,EAAAE,KAAAC,OAAA,CAAAC,eAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,IAAAJ,GAAAA,EAAAA,EAAAT,aAAAS,YAAAA,EAAAE,OAAAF,YAAAA,EAAAG,MAAAA,CAAA,CAAA,YAAAF,EAAAV,WAAA,CAAA,GAAAU,EAAAV,WAAAW,KAAA,CAAA,IAAAD,EAAAA,EAAAV,aAAAU,YAAAA,EAAAC,KAAAC,OAAA,CAAAC,eAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,IAAAH,GAAAA,EAAAA,EAAAV,aAAAU,YAAAA,EAAAC,OAAAD,YAAAA,EAAAE,MAAAA,CAAA,CAAA","x_google_ignoreList":[0,1,2]}