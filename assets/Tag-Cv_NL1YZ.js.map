{"version":3,"file":"Tag-Cv_NL1YZ.js","sources":["../../src/Tag/Tag.tsx"],"sourcesContent":["import React, { FC } from 'react'\nimport styled from 'styled-components'\nimport { MarginProps } from '../utils/space'\n\nimport { TransientProps } from 'utils/utilTypes'\nimport { Box } from '../Box'\nimport { Text } from '../Text'\nimport { Color } from '../theme'\nimport { Icon } from '../Icon'\nimport { Icons } from 'Icon/iconsList'\nimport {\n  ColorTypes,\n  getColorPath,\n  resolveToThemeColor,\n} from '../ThemeProvider/utils/colourMap'\n\nexport type TagProps = {\n  label: string\n  color: ColorTypes\n  bgColor: ColorTypes\n  borderColor?: ColorTypes\n  className?: string\n  icon?: Icons\n  iconColor?: Color\n  onClick?: () => void\n} & MarginProps\n\nexport const Tag: FC<TagProps> = ({\n  label,\n  color,\n  borderColor,\n  bgColor,\n  className,\n  icon,\n  iconColor,\n  onClick,\n  ...marginProps\n}) => {\n  const resolvedBGColor = resolveToThemeColor(bgColor)\n\n  const resolvedBorderColor = borderColor && resolveToThemeColor(borderColor)\n\n  return (\n    <Wrapper\n      $bgColor={resolvedBGColor}\n      className={className}\n      $borderColor={resolvedBorderColor}\n      {...marginProps}\n      alignContent=\"center\"\n      justifyContent=\"center\"\n      onClick={onClick}\n    >\n      {icon && (\n        <TagIcon\n          render={icon}\n          color={iconColor}\n          size={16}\n          data-testid={`tag-icon-${icon}`}\n        />\n      )}\n      <TagText tag=\"span\" typo=\"label\" color={getColorPath(color)}>\n        {label}\n      </TagText>\n    </Wrapper>\n  )\n}\n\ntype WrapperProps = TransientProps<{\n  bgColor: string\n  borderColor?: string\n}>\n\nconst Wrapper = styled(Box)<WrapperProps>`\n  background-color: ${({ $bgColor }) => $bgColor};\n  border: ${({ $borderColor }) => $borderColor && `1px solid ${$borderColor}`};\n\n  border-radius: 6px;\n  padding: 4px 8px;\n\n  height: 22px;\n\n  box-sizing: border-box;\n  display: inline-flex;\n`\n\nconst TagText = styled(Text)`\n  display: flex;\n  align-items: center;\n  font-size: 10px;\n  font-weight: 500;\n  line-height: 12px;\n  text-transform: uppercase;\n`\n\nconst TagIcon = styled(Icon)`\n  padding-right: 4px;\n`\n"],"names":["cov_1o0kf1lqso","actualCoverage","Tag","color","borderColor","bgColor","className","icon","iconColor","onClick","marginProps","resolvedBGColor","resolvedBorderColor","resolveToThemeColor","Wrapper","$borderColor","alignContent","justifyContent","render","React","TagIcon","size","createElement","tag","TagText","typo","getColorPath","label","styled","Box","$bgColor","s"],"mappings":"8yGAiCE,OAAAA,EAAAC,UAAA,CAAA,OAAAA,CAAA,EAAAA,CAAAD,CAjCFA,IA2BOA,IAAM,EAAoBE,CAAC,IAChC,MAAAA,EAAA,CAAA,CACAC,MAAAA,EACAC,MAAAA,EACAC,YAAAA,EACAC,QAAAA,EACAC,UAAAA,EACAC,KAAAA,EACAC,UAAAA,EACA,QAAAA,EACF,GAAAC,CAAMV,IAAAA,CACJA,EAAMW,EAAAA,EAAAA,CAAAA,IAEN,MAAMC,GAAAZ,EAAAA,EAAAA,EAAA,CAAA,IAAAa,EAAsBR,IAA8CL,GAAAA,IAAA,EAAA,CAAA,IAAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAAI,IAAAJ,IAAA,EAAA,CAAA,EAAA,CAAA,IAAAa,EAAAT,CAAA,IAE1E,OAAAJ,EAAA,EAAA,EAAA,CAAA,IAEcW,EAAA,cAAAG,EAAA,CACVR,SAAAK,EACAI,UAAAA,EACC,aAAGH,EACJI,GAAAA,EACAC,aAAA,SACAR,eAAAA,kBAIIS,GAAAA,EAAQ,EAAA,EAAA,CAAA,EAAA,CAAA,IAAAX,IAAAP,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAAmB,EAAA,cAAAC,EAAA,CACRjB,OAAOK,EACPa,MAAMb,EACN,KAAA,GACF,0BAEFc,CAAAA,EAASC,CAAAA,IAAIJ,EAAA,cAAAK,EAAA,CAAOC,WAAatB,KAAA,QAAyB,MAG5DuB,EAAAvB,CAAA,CAEJ,EAAAwB,CAAA,CAAA,CAOA,OACuB,EAAA,EAAA,CAAA,IAAAC,EAAAC,CAAA;AAAA,sBAAEC,CAAAA,CAAS,SAAAA,MAAMA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAQ,EAAA,CAAA,IAAAA;YACjCf,CAAAA,eAAmBf,KAAAA,EAAA,EAAA+B,EAAA,CAAA,IAAA/B,EAAAA,EAAAA,EAAAA,CAAAA,IAA2CA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAAe,IAAAf,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAA,aAAAe,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}