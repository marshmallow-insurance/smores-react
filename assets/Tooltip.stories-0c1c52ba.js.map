{"version":3,"file":"Tooltip.stories-0c1c52ba.js","sources":["../../src/hooks/useEventListener/index.ts","../../src/Tooltip/Tooltip.tsx"],"sourcesContent":["import { RefObject, useEffect } from 'react'\nimport { GenericEventCallback } from '../../types'\n\nexport const useEventListener = ({\n  eventName,\n  callback,\n  ref,\n  capture = false,\n}: {\n  eventName: keyof HTMLElementEventMap | string\n  callback: GenericEventCallback\n  ref: RefObject<HTMLElement | Document>\n  capture?: boolean\n}): void => {\n  useEffect(() => {\n    const refElement = ref && ref.current\n    if (!refElement) return\n    const listenerOptions = { capture }\n\n    refElement.addEventListener(eventName, callback, listenerOptions)\n\n    return () => {\n      refElement.removeEventListener(eventName, callback, listenerOptions)\n    }\n  }, [eventName, ref, callback, capture])\n}\n","import React, {\n  FC,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\nimport styled, { css } from 'styled-components'\nimport { useEventListener } from '../hooks'\nimport { Text } from '../Text'\nimport { theme } from '../theme'\n\ntype Position = 'top' | 'bottom' | 'left' | 'right'\ntype ArrowPosition = Position | 'center'\n\nexport interface TooltipProps {\n  children: ReactNode\n  content: string | ReactNode\n  position: Position\n  maxWidth?: number\n  title?: string\n  underline?: boolean\n  defaultArrowPosition?: ArrowPosition\n}\n\nexport const Tooltip: FC<TooltipProps> = ({\n  children,\n  title,\n  content,\n  maxWidth = 500,\n  underline = false,\n  defaultArrowPosition = 'center',\n}) => {\n  const tipContainer = useRef<HTMLDivElement>(null)\n  const documentRef = useRef<Document>(document)\n  const [showTip, setShowTip] = useState<boolean>(false)\n  const [tooltipPosition, setTooltipPosition] = useState<Position>('top')\n  const [arrowPosition, setArrowPosition] =\n    useState<ArrowPosition>(defaultArrowPosition)\n\n  const checkInbounds = (element: DOMRect): boolean =>\n    element.top >= 0 &&\n    element.left >= 0 &&\n    element.bottom <= window.innerHeight &&\n    element.right <= window.innerWidth\n\n  const handleTipViewport = useCallback(() => {\n    const shouldChangeXAxis =\n      tooltipPosition === 'left' || tooltipPosition === 'right'\n    const shouldChangeYAxis =\n      tooltipPosition === 'top' || tooltipPosition === 'bottom'\n\n    const handleArrowAxisChange = () => {\n      if (arrowPosition === 'left') {\n        setArrowPosition('top')\n      }\n      if (arrowPosition === 'right') {\n        setArrowPosition('bottom')\n      }\n\n      if (arrowPosition === 'top') {\n        setArrowPosition('left')\n      }\n      if (arrowPosition === 'bottom') {\n        setArrowPosition('right')\n      }\n    }\n\n    const dimensions = tipContainer.current?.getBoundingClientRect()\n\n    if (!dimensions) return\n    if (checkInbounds(dimensions)) return\n\n    // If in bounds but not defaulted to top; default\n    if (dimensions.top >= 0 && tooltipPosition !== 'top') {\n      setArrowPosition(defaultArrowPosition)\n      setTooltipPosition('top')\n      return\n    }\n    // if top out of bounds\n    if (dimensions.top < 0) {\n      shouldChangeXAxis && handleArrowAxisChange()\n      setTooltipPosition('bottom')\n      return\n    }\n    // if right out of bounds\n    if (dimensions.right > window.innerWidth) {\n      shouldChangeYAxis && handleArrowAxisChange()\n      setTooltipPosition('left')\n      return\n    }\n    // if left out of bounds\n    if (dimensions.left < 0) {\n      shouldChangeYAxis && handleArrowAxisChange()\n      setTooltipPosition('right')\n      return\n    }\n    // If bottom out of bounds\n    if (dimensions.bottom > window.innerHeight) {\n      shouldChangeXAxis && handleArrowAxisChange()\n      setTooltipPosition('top')\n      return\n    }\n  }, [tipContainer, tooltipPosition, arrowPosition])\n\n  useEffect(() => {\n    handleTipViewport()\n  }, [])\n\n  useEventListener({\n    eventName: 'resize',\n    callback: handleTipViewport,\n    ref: documentRef,\n  })\n\n  useEventListener({\n    eventName: 'scroll',\n    callback: handleTipViewport,\n    ref: documentRef,\n  })\n\n  return (\n    <Container underline={underline}>\n      <Text\n        cursor=\"pointer\"\n        onMouseEnter={() => setShowTip(true)}\n        onMouseLeave={() => setShowTip(false)}\n      >\n        {children}\n      </Text>\n      <Tip\n        className=\"tooltip\"\n        showTip={showTip}\n        position={tooltipPosition}\n        arrowPosition={arrowPosition}\n        ref={tipContainer}\n        maxWidth={maxWidth}\n      >\n        {title && (\n          <Text tag=\"h5\" typo=\"desc-medium\" color=\"liquorice\">\n            {title}\n          </Text>\n        )}\n        {(typeof content === 'string' && (\n          <Text typo=\"desc-light\" color=\"liquorice\">\n            {content}\n          </Text>\n        )) ||\n          content}\n      </Tip>\n    </Container>\n  )\n}\n\nexport const Container = styled.div<{ underline: boolean }>`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  ${({ underline }) =>\n    underline &&\n    css`\n      border-bottom: 1px dashed ${theme.colors.marshmallowPink};\n    `}\n\n  > span:hover + .tooltip {\n    opacity: 1;\n  }\n`\n\nconst arrowPaddingSize = 18\nconst arrowInset = 26\nconst arrowCenterPosition = 'calc(50% - 12px)'\nconst arrowPadding = `calc(100% + ${arrowPaddingSize}px);`\nconst calculateTipPosition = `calc(50% - ${\n  arrowPaddingSize / 2 + arrowInset\n}px);`\n\nconst handleTipPosition = (arrowPosition: ArrowPosition) => {\n  switch (arrowPosition) {\n    case 'left':\n      return css`\n        left: ${calculateTipPosition};\n      `\n    case 'right':\n      return css`\n        right: ${calculateTipPosition};\n      `\n    case 'top':\n      return css`\n        top: ${calculateTipPosition};\n      `\n    case 'bottom':\n      return css`\n        bottom: ${calculateTipPosition};\n      `\n    default:\n      return 'calc(100% + 18px)'\n  }\n}\n\nconst handleHorizontalArrowPosition = (arrowPosition: ArrowPosition) => {\n  switch (arrowPosition) {\n    case 'left':\n      return css`\n        left: ${arrowInset}px;\n      `\n    case 'right':\n      return css`\n        right: ${arrowInset}px;\n      `\n    default:\n      return css`\n        left: ${arrowCenterPosition};\n      `\n  }\n}\n\nconst handleVerticalArrowPosition = (arrowPosition: ArrowPosition) => {\n  switch (arrowPosition) {\n    case 'top':\n      return css`\n        top: ${arrowInset}px;\n      `\n    case 'bottom':\n      return css`\n        bottom: ${arrowInset}px;\n      `\n    default:\n      return css`\n        top: ${arrowCenterPosition};\n      `\n  }\n}\n\nconst top = css<{ arrowPosition: ArrowPosition }>`\n  bottom: ${arrowPadding};\n  ${({ arrowPosition }) => handleTipPosition(arrowPosition)};\n\n  &:before {\n    bottom: -15px;\n    transform: rotate(-90deg);\n    ${({ arrowPosition }) => handleHorizontalArrowPosition(arrowPosition)}\n  }\n`\n\nconst bottom = css<{ arrowPosition: ArrowPosition }>`\n  top: ${arrowPadding};\n  ${({ arrowPosition }) => handleTipPosition(arrowPosition)};\n\n  &:before {\n    top: -15px;\n    transform: rotate(90deg);\n    ${({ arrowPosition }) => handleHorizontalArrowPosition(arrowPosition)}\n  }\n`\n\nconst left = css<{ arrowPosition: ArrowPosition }>`\n  right: ${arrowPadding};\n\n  ${({ arrowPosition }) => handleTipPosition(arrowPosition)};\n  &:before {\n    right: -11px;\n    transform: rotate(180deg);\n    ${({ arrowPosition }) => handleVerticalArrowPosition(arrowPosition)}\n  }\n`\nconst right = css<{ arrowPosition: ArrowPosition }>`\n  left: ${arrowPadding};\n\n  ${({ arrowPosition }) => handleTipPosition(arrowPosition)};\n  &:before {\n    ${({ arrowPosition }) => handleVerticalArrowPosition(arrowPosition)}\n    left: -11px;\n  }\n`\n\nexport const Tip = styled.div<{\n  showTip: boolean\n  position: Position\n  arrowPosition: ArrowPosition\n  maxWidth?: number\n}>`\n  position: absolute;\n  margin: auto;\n  background: ${theme.colors.custard};\n  padding: 16px 12px 20px;\n  border-radius: 16px;\n  max-width: 450px;\n  opacity: ${({ showTip }) => (showTip ? '1' : '0')};\n  transition: opacity 0.2s ease-in-out;\n  pointer-events: none;\n  cursor: default;\n\n  left: 50%;\n  transform: translateX(-50%);\n\n  // this is the trick that will make sure the content can go up to maxWidth\n  margin-right: ${({ maxWidth }) => maxWidth && -maxWidth / 2 + 'px'};\n  max-width: ${({ maxWidth }) => maxWidth && maxWidth + 'px'};\n\n  ${({ position }) => position === 'top' && top}\n  ${({ position }) => position === 'bottom' && bottom}\n\t${({ position }) => position === 'left' && left}\n\t${({ position }) => position === 'right' && right}\n\n  &:before {\n    content: '';\n    border-style: solid;\n    border-width: 12px 12px 12px 0;\n    border-color: transparent ${theme.colors.custard} transparent transparent;\n    position: absolute;\n  }\n`\n"],"names":["useEventListener","eventName","callback","ref","capture","useEffect","refElement","listenerOptions","Tooltip","children","title","content","maxWidth","underline","defaultArrowPosition","tipContainer","useRef","documentRef","showTip","setShowTip","useState","tooltipPosition","setTooltipPosition","arrowPosition","setArrowPosition","checkInbounds","element","handleTipViewport","useCallback","shouldChangeXAxis","shouldChangeYAxis","handleArrowAxisChange","dimensions","_a","jsxs","Container","jsx","Text","Tip","styled","css","theme","arrowPaddingSize","arrowInset","arrowCenterPosition","arrowPadding","calculateTipPosition","handleTipPosition","handleHorizontalArrowPosition","handleVerticalArrowPosition","top","bottom","left","right","position"],"mappings":"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"}