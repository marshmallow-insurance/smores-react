{"version":3,"file":"SegmentedControl.stories-D3Z_IrKB.js","sources":["../../src/SegmentedControl/ToggleButton.tsx","../../src/SegmentedControl/SegmentedControl.tsx","../../src/SegmentedControl/storybook/Container.tsx","../../src/SegmentedControl/storybook/SegmentedControl.stories.tsx"],"sourcesContent":["import React, { ReactNode } from 'react'\nimport styled, { css } from 'styled-components'\nimport { Box } from '../Box'\n\ntype ToggleButtonProps<Value> = {\n  name: string\n  value: Value\n  onChange: (value: Value) => void\n  isSelected: boolean\n  isDisabled?: boolean\n  children: ReactNode\n}\n\nexport const ToggleButton = <Value,>({\n  name,\n  value,\n  onChange,\n  isSelected,\n  isDisabled = false,\n  children,\n}: ToggleButtonProps<Value>) => {\n  return (\n    <Wrapper\n      as=\"label\"\n      data-testid={`value-toggle-${String(value)}`}\n      isDisabled={isDisabled}\n    >\n      <VisuallyHiddenInput\n        type=\"radio\"\n        name={name}\n        checked={isSelected}\n        onClick={() => onChange(value)}\n        onChange={() => onChange(value)}\n      />\n      {children}\n    </Wrapper>\n  )\n}\n\nconst Wrapper = styled(Box)<{ isDisabled: boolean }>`\n  cursor: pointer;\n  ${({ isDisabled }) =>\n    isDisabled &&\n    css`\n      pointer-events: none;\n      opacity: 0.5;\n    `}\n  padding: 10px 14px;\n  transition: color 0.1s linear;\n  height: fit-content;\n  width: 100%;\n  align-content: center;\n  z-index: 3;\n`\n\nconst VisuallyHiddenInput = styled.input`\n  clip: rect(0 0 0 0);\n  clip-path: inset(50%);\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n`\n","import styled, { css, useTheme } from 'styled-components'\n\nimport React from 'react'\nimport { Box } from '../Box'\nimport { Tag } from '../Tag'\nimport { Text } from '../Text'\nimport { theme as oldTheme } from '../theme'\nimport {\n  ColorTypes,\n  getColorPath,\n  resolveToThemeColor,\n} from '../ThemeProvider/utils/colourMap'\nimport { ToggleButton } from './ToggleButton'\n\nexport type SegmentedControlOption<T = string | number> = {\n  label: string\n  secondaryLabel?: string\n  /** value needs to be number or string */\n  value: T\n  /** optional tag able to show in the toggle if showTag prop is passed */\n  tag?: string\n  isDisabled?: boolean\n}\n\ntype StylingOptions = {\n  toggle?: ColorTypes\n  background?: ColorTypes\n  text?: ColorTypes\n  selectedText?: ColorTypes\n  tagBg?: ColorTypes\n  tagBorder?: ColorTypes\n  tagText?: ColorTypes\n  fullWidth?: boolean\n}\n\nexport type SegmentedControlProps<T> = {\n  /** you can pass more than 2 options */\n  options: SegmentedControlOption<T>[]\n  value: T\n  onChange: (value: T) => void\n  /**  pass this prop if you want to show the tag in the toggle */\n  showTag?: boolean\n  /** pass a StylingOptions object with the needed styles if you want to style the SegmentedControl */\n  styles?: StylingOptions\n}\n\n/**\n * ### How do I pass state to the `SegmentedControl` component?\n * We recommend pulling the state up to at least the component that renders `SegmentedControl` up to at least the component that renders `SegmentedControl`, this should make it easier to pass state to the `SegmentedControl` component\n */\nexport const SegmentedControl = <T,>({\n  options,\n  value,\n  onChange,\n  showTag,\n  styles: {\n    tagBorder = 'color.surface.brand.300',\n    tagText = 'color.surface.base.000',\n    tagBg = 'color.surface.brand.300',\n    selectedText = 'color.surface.base.000',\n    text = 'color.text.base',\n    background = 'color.surface.base.300',\n    toggle = 'color.text.base',\n    fullWidth = false,\n  } = {},\n}: SegmentedControlProps<T>) => {\n  const theme = useTheme()\n\n  const resolvedBackgroundColor =\n    background && resolveToThemeColor(background, theme)\n  const resolvedToggleColor = toggle && resolveToThemeColor(toggle, theme)\n  const resolvedSelectedTextColor = resolveToThemeColor(selectedText, theme)\n\n  return (\n    <ToggleWrapper\n      $backgroundColor={resolvedBackgroundColor}\n      $fullWidth={fullWidth}\n    >\n      <IndicatorWrapper backgroundColor={resolvedBackgroundColor}>\n        {options.map((option) => {\n          const isSelected = option.value === value\n\n          return (\n            <ToggleButton\n              key={option.label}\n              name=\"toggle-version-button\"\n              value={option.value}\n              onChange={onChange}\n              isSelected={isSelected}\n              isDisabled={option.isDisabled}\n            >\n              <StyledWrapper>\n                {showTag && option.tag && (\n                  <StyledTag\n                    bgColor={getColorPath(tagBg)}\n                    borderColor={getColorPath(tagBorder)}\n                    color={getColorPath(tagText)}\n                    label={option.tag}\n                  />\n                )}\n                <Box\n                  flex\n                  direction=\"column\"\n                  justifyContent=\"center\"\n                  alignItems=\"center\"\n                >\n                  <StyledText\n                    isSelected={isSelected}\n                    $selectedTextColor={resolvedSelectedTextColor}\n                    color={text}\n                  >\n                    {option.label}\n                  </StyledText>\n                  {option.secondaryLabel && (\n                    <Text\n                      color={isSelected ? selectedText : text}\n                      typo=\"caption\"\n                    >\n                      {option.secondaryLabel}\n                    </Text>\n                  )}\n                </Box>\n              </StyledWrapper>\n            </ToggleButton>\n          )\n        })}\n\n        <ToggleIndicator\n          selectedIndex={options.findIndex((option) => option.value === value)}\n          sections={options.length}\n          toggleColor={resolvedToggleColor}\n        />\n      </IndicatorWrapper>\n    </ToggleWrapper>\n  )\n}\n\nconst BORDER_RADIUS = 1000\n\nconst StyledWrapper = styled(Box)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 4px;\n`\n\nconst StyledTag = styled(Tag)`\n  border-radius: 100px;\n`\n\nconst StyledText = styled(Text)<{\n  isSelected: boolean\n  $selectedTextColor: string\n}>`\n  font-weight: ${oldTheme.font.weight.medium};\n  ${({ isSelected, $selectedTextColor }) =>\n    isSelected && `color: ${$selectedTextColor};`}\n  padding: 2px 0px;\n`\n\nconst ToggleWrapper = styled(Box)<{\n  $backgroundColor?: string\n  $fullWidth?: boolean\n}>`\n  padding: 4px;\n  background-color: ${(p) => p.$backgroundColor};\n  border-radius: ${BORDER_RADIUS}px;\n\n  ${({ $fullWidth }) =>\n    $fullWidth &&\n    css`\n      width: 100%;\n    `}\n`\n\nconst IndicatorWrapper = styled(Box)<{ backgroundColor?: string }>`\n  position: relative;\n  display: flex;\n  background-color: ${(p) => p.backgroundColor};\n  border-radius: ${BORDER_RADIUS}px;\n`\n\nconst ToggleIndicator = styled(Box)<{\n  selectedIndex: number\n  sections: number\n  toggleColor?: string\n}>`\n  background-color: ${(p) => p.toggleColor};\n  border-radius: ${BORDER_RADIUS}px;\n  position: absolute;\n  z-index: 1;\n  height: 100%;\n  width: ${(p) => `calc(100% / ${p.sections})`};\n  transition: transform 0.4s;\n  transform: ${(p) => `translateX(${p.selectedIndex * 100}%)`};\n`\n","import { Box } from '../../Box'\nimport { SegmentedControl, SegmentedControlProps } from '../SegmentedControl'\nimport React, { ReactNode } from 'react'\n\nexport const Container = <T,>(props: SegmentedControlProps<T>) => {\n  const [value, setValue] = React.useState(props.value)\n\n  return (\n    <>\n      <SegmentedControl {...props} value={value} onChange={setValue} />\n      <Box p={'16px'}>\n        <p>Selected value: {value as ReactNode}</p>\n      </Box>\n    </>\n  )\n}\n","import type { Meta, StoryObj } from '@storybook/react'\nimport React from 'react'\nimport { SegmentedControl, SegmentedControlProps } from '../SegmentedControl'\nimport { Container } from './Container'\n\ntype StoryMeta = Meta<typeof SegmentedControl>\ntype Story = StoryObj<typeof SegmentedControl>\n\nconst meta: StoryMeta = {\n  title: 'SegmentedControl',\n  component: SegmentedControl,\n}\nexport default meta\n\nconst Template = <T,>(props: SegmentedControlProps<T>) => (\n  <Container {...props} />\n)\nexport const Default: Story = {\n  render: Template,\n  args: {\n    options: [\n      { label: 'Option 1', value: 'option1' },\n      { label: 'Option 2', value: 'option2', tag: 'tag 2' },\n    ],\n    value: 'option1',\n    showTag: false,\n  },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            //disabling these until we sync with design on this\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n}\n\nexport const SegmentedControlWithSecondaryLabels: Story = {\n  render: Template,\n  args: {\n    options: [\n      { label: 'Option 1', value: 1, secondaryLabel: 'Secondary Label 1' },\n      { label: 'Option 2', value: 2, secondaryLabel: 'Secondary Label 2' },\n    ],\n    value: 1,\n  },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n}\n\nexport const SegmentedControlWithTags: Story = {\n  render: Template,\n  args: {\n    options: [\n      { label: 'Option 1', value: 1 },\n      { label: 'Option 2', value: 2, tag: 'tag 2' },\n      { label: 'Option 3', value: 3, tag: 'tag 3', isDisabled: true },\n    ],\n    value: 2,\n    showTag: true,\n    styles: {\n      tagText: 'color.text.base',\n      tagBorder: 'color.text.base',\n      tagBg: 'color.surface.base.000',\n      selectedText: 'color.text.base',\n      text: 'color.text.base',\n      background: 'color.surface.brand.300',\n      toggle: 'color.surface.base.000',\n    },\n  },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            //disabling these until we sync with design on this\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n}\n"],"names":["cov_6f342n0lw","actualCoverage","ToggleButton","value","onChange","isSelected","isDisabled","children","s","React","Wrapper","type","VisuallyHiddenInput","name","checked","onClick","cov_2itvshnmy0","SegmentedControl","options","showTag","styles","tagBorder","tagText","tagBg","selectedText","text","background","b","toggle","fullWidth","resolvedBackgroundColor","resolvedToggleColor","resolveToThemeColor","theme","resolvedSelectedTextColor","$fullWidth","backgroundColor","option","bgColor","getColorPath","StyledWrapper","StyledTag","borderColor","color","label","tag","flex","Box","direction","justifyContent","alignItems","StyledText","$selectedTextColor","Text","typo","createElement","selectedIndex","findIndex","sections","toggleColor","oldTheme","weight","medium","styled","p","$backgroundColor","BORDER_RADIUS","cov_o7z1um1mm","Container","props","setValue","meta","title","component","Template","Default","render","args","parameters","a11y","config","rules","id","enabled","SegmentedControlWithSecondaryLabels","secondaryLabel","SegmentedControlWithTags","docs","source","originalSource"],"mappings":"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"}