{"version":3,"file":"Tag-6HajdqQG.js","sources":["../../src/Tag/Tag.tsx"],"sourcesContent":["import React, { FC } from 'react'\nimport styled, { useTheme } from 'styled-components'\nimport { MarginProps } from '../utils/space'\n\nimport { TransientProps } from 'utils/utilTypes'\nimport { Box } from '../Box'\nimport { Text } from '../Text'\nimport { Icon } from '../Icon'\nimport { Icons } from 'Icon/iconsList'\nimport {\n  ColorTypes,\n  getColorPath,\n  resolveToThemeColor,\n} from '../ThemeProvider/utils/colourMap'\n\nexport type TagProps = {\n  label: string\n  color: ColorTypes\n  bgColor: ColorTypes\n  borderColor?: ColorTypes\n  className?: string\n  icon?: Icons\n  iconColor?: ColorTypes\n  onClick?: () => void\n} & MarginProps\n\nexport const Tag: FC<TagProps> = ({\n  label,\n  color,\n  borderColor,\n  bgColor,\n  className,\n  icon,\n  iconColor,\n  onClick,\n  ...marginProps\n}) => {\n  const theme = useTheme()\n\n  const resolvedBGColor = resolveToThemeColor(bgColor, theme)\n  const resolvedBorderColor =\n    borderColor && resolveToThemeColor(borderColor, theme)\n\n  return (\n    <Wrapper\n      $bgColor={resolvedBGColor}\n      className={className}\n      $borderColor={resolvedBorderColor}\n      {...marginProps}\n      alignContent=\"center\"\n      justifyContent=\"center\"\n      onClick={onClick}\n    >\n      {icon && (\n        <TagIcon\n          render={icon}\n          color={iconColor}\n          size={16}\n          data-testid={`tag-icon-${icon}`}\n        />\n      )}\n      <TagText tag=\"span\" typo=\"label\" color={getColorPath(color)}>\n        {label}\n      </TagText>\n    </Wrapper>\n  )\n}\n\ntype WrapperProps = TransientProps<{\n  bgColor: string\n  borderColor?: string\n}>\n\nconst Wrapper = styled(Box)<WrapperProps>`\n  background-color: ${({ $bgColor }) => $bgColor};\n  border: ${({ $borderColor }) => $borderColor && `1px solid ${$borderColor}`};\n\n  border-radius: 6px;\n  padding: 4px 8px;\n\n  height: 22px;\n\n  box-sizing: border-box;\n  display: inline-flex;\n`\n\nconst TagText = styled(Text)`\n  display: flex;\n  align-items: center;\n  font-size: 10px;\n  font-weight: 500;\n  line-height: 12px;\n  text-transform: uppercase;\n`\n\nconst TagIcon = styled(Icon)`\n  padding-right: 4px;\n`\n"],"names":["cov_1o0kf1lqso","actualCoverage","Tag","color","borderColor","bgColor","className","icon","iconColor","onClick","marginProps","resolvedBGColor","useTheme","resolvedBorderColor","resolveToThemeColor","theme","Wrapper","$borderColor","alignContent","justifyContent","render","React","TagIcon","size","createElement","tag","TagText","typo","getColorPath","label","styled","Box","$bgColor","s"],"mappings":"g8GAgCE,OAAAA,EAAAC,UAAA,CAAA,OAAAA,CAAA,EAAAA,CAAAD,CAhCFA,IA0BOA,IAAM,EAAoBE,CAAC,IAChC,MAAAA,EAAA,CAAA,CACAC,MAAAA,EACAC,MAAAA,EACAC,YAAAA,EACAC,QAAAA,EACAC,UAAAA,EACAC,KAAAA,EACAC,UAAAA,EACA,QAAAA,EACF,GAAAC,CAAMV,IAAAA,CACJA,IAAMA,EAAAA,CAAAA,IAEN,MAAMW,GAAAA,IAAAX,EAAAA,CAAAA,IAAAY,KACAC,GAAAb,EAAAA,EAAAA,EAAA,CAAA,IAAAc,EACJT,EAAAU,IAAqDf,GAAAA,IAAA,EAAA,CAAA,IAAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAAI,IAAAJ,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAAc,EAAAV,EAAAW,CAAA,IAEvD,OAAAf,EAAA,EAAA,EAAA,CAAA,IAEcW,EAAA,cAAAK,EAAA,CACVV,SAAAK,EACAM,UAAAA,EACC,aAAGJ,EACJK,GAAAA,EACAC,aAAA,SACAV,eAAAA,kBAIIW,GAAAA,EAAQ,EAAA,EAAA,CAAA,EAAA,CAAA,IAAAb,IAAAP,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAAqB,EAAA,cAAAC,EAAA,CACRnB,OAAOK,EACPe,MAAMf,EACN,KAAA,GACF,0BAEFgB,CAAAA,EAASC,CAAAA,IAAIJ,EAAA,cAAAK,EAAA,CAAOC,WAAaxB,KAAA,QAAyB,MAG5DyB,EAAAzB,CAAA,CAEJ,EAAA0B,CAAA,CAAA,CAOA,OACuB,EAAA,EAAA,CAAA,IAAAC,EAAAC,CAAA;AAAA,sBAAEC,CAAAA,CAAS,SAAAA,MAAMA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAQ,EAAA,CAAA,IAAAA;YACjCf,CAAAA,eAAmBjB,KAAAA,EAAA,EAAAiC,EAAA,CAAA,IAAAjC,EAAAA,EAAAA,EAAAA,CAAAA,IAA2CA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAAiB,IAAAjB,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAA,aAAAiB,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}