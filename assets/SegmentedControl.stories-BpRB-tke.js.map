{"version":3,"file":"SegmentedControl.stories-BpRB-tke.js","sources":["../../src/SegmentedControl/ToggleButton.tsx","../../src/SegmentedControl/SegmentedControl.tsx","../../src/SegmentedControl/storybook/Container.tsx","../../src/SegmentedControl/storybook/SegmentedControl.stories.tsx"],"sourcesContent":["import React, { ReactNode } from 'react'\nimport styled, { css } from 'styled-components'\nimport { Box } from '../Box'\n\ntype ToggleButtonProps<Value> = {\n  name: string\n  value: Value\n  onChange: (value: Value) => void\n  isSelected: boolean\n  isDisabled?: boolean\n  children: ReactNode\n}\n\nexport const ToggleButton = <Value,>({\n  name,\n  value,\n  onChange,\n  isSelected,\n  isDisabled = false,\n  children,\n}: ToggleButtonProps<Value>) => {\n  return (\n    <Wrapper\n      as=\"label\"\n      data-testid={`value-toggle-${String(value)}`}\n      isDisabled={isDisabled}\n    >\n      <VisuallyHiddenInput\n        type=\"radio\"\n        name={name}\n        checked={isSelected}\n        onClick={() => onChange(value)}\n        onChange={() => onChange(value)}\n      />\n      {children}\n    </Wrapper>\n  )\n}\n\nconst Wrapper = styled(Box)<{ isDisabled: boolean }>`\n  cursor: pointer;\n  ${({ isDisabled }) =>\n    isDisabled &&\n    css`\n      pointer-events: none;\n      opacity: 0.5;\n    `}\n  padding: 10px 14px;\n  transition: color 0.1s linear;\n  height: fit-content;\n  width: 100%;\n  align-content: center;\n  z-index: 3;\n`\n\nconst VisuallyHiddenInput = styled.input`\n  clip: rect(0 0 0 0);\n  clip-path: inset(50%);\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n`\n","import styled from 'styled-components'\n\nimport { Color, theme } from '../theme'\nimport { Box } from '../Box'\nimport { Tag } from '../Tag'\nimport { Text } from '../Text'\nimport React from 'react'\nimport { ToggleButton } from './ToggleButton'\n\nexport type SegmentedControlOption<T = string | number> = {\n  label: string\n  /** value needs to be number or string */\n  value: T\n  /** optional tag able to show in the toggle if showTag prop is passed */\n  tag?: string\n  isDisabled?: boolean\n}\n\ntype StylingOptions = {\n  toggle?: Color\n  background?: Color\n  text?: Color\n  selectedText?: Color\n  tagBg?: Color\n  tagBorder?: Color\n  tagText?: Color\n}\n\nexport type SegmentedControlProps<T> = {\n  /** you can pass more than 2 options */\n  options: SegmentedControlOption<T>[]\n  value: T\n  onChange: (value: T) => void\n  /**  pass this prop if you want to show the tag in the toggle */\n  showTag?: boolean\n  /** pass a StylingOptions object with the needed styles if you want to style the SegmentedControl */\n  styles?: StylingOptions\n}\n\n/**\n * ### How do I pass state to the `SegmentedControl` component?\n * We recommend pulling the state up to at least the component that renders `SegmentedControl` up to at least the component that renders `SegmentedControl`, this should make it easier to pass state to the `SegmentedControl` component\n */\nexport const SegmentedControl = <T,>({\n  options,\n  value,\n  onChange,\n  showTag,\n  styles: {\n    tagBorder = 'marshmallowPink',\n    tagText = 'cream',\n    tagBg = 'marshmallowPink',\n    selectedText = 'cream',\n    text = 'liquorice',\n    background,\n    toggle,\n  } = {},\n}: SegmentedControlProps<T>) => {\n  return (\n    <ToggleWrapper backgroundColor={background}>\n      <IndicatorWrapper backgroundColor={background}>\n        {options.map((option) => {\n          return (\n            <ToggleButton\n              key={option.label}\n              name=\"toggle-version-button\"\n              value={option.value}\n              onChange={onChange}\n              isSelected={option.value === value}\n              isDisabled={option.isDisabled}\n            >\n              <StyledWrapper>\n                {showTag && option.tag && (\n                  <StyledTag\n                    bgColor={tagBg}\n                    borderColor={tagBorder}\n                    color={tagText}\n                    label={option.tag}\n                  />\n                )}\n                <StyledText\n                  isSelected={option.value === value}\n                  selectedTextColor={selectedText}\n                  color={text}\n                >\n                  {option.label}\n                </StyledText>\n              </StyledWrapper>\n            </ToggleButton>\n          )\n        })}\n\n        <ToggleIndicator\n          selectedIndex={options.findIndex((option) => option.value === value)}\n          sections={options.length}\n          toggleColor={toggle}\n        />\n      </IndicatorWrapper>\n    </ToggleWrapper>\n  )\n}\n\nconst BORDER_RADIUS = 25\n\nconst StyledWrapper = styled(Box)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 4px;\n`\n\nconst StyledTag = styled(Tag)`\n  border-radius: 100px;\n`\n\nconst StyledText = styled(Text)<{\n  isSelected: boolean\n  selectedTextColor: Color\n}>`\n  font-weight: ${theme.font.weight.medium};\n  ${({ isSelected, selectedTextColor }) =>\n    isSelected && `color: ${theme.colors[selectedTextColor]};`}\n  padding: 2px 0px;\n`\n\nconst ToggleWrapper = styled(Box)<{ backgroundColor?: Color }>`\n  padding: 4px;\n  background-color: ${(p) => theme.colors[p.backgroundColor ?? 'custard']};\n  border-radius: ${BORDER_RADIUS}px;\n`\n\nconst IndicatorWrapper = styled(Box)<{ backgroundColor?: Color }>`\n  position: relative;\n  display: flex;\n  background-color: ${(p) => theme.colors[p.backgroundColor ?? 'custard']};\n  border-radius: ${BORDER_RADIUS}px;\n`\n\nconst ToggleIndicator = styled(Box)<{\n  selectedIndex: number\n  sections: number\n  toggleColor?: Color\n}>`\n  background-color: ${(p) => theme.colors[p.toggleColor ?? 'liquorice']};\n  border-radius: ${BORDER_RADIUS}px;\n  position: absolute;\n  z-index: 1;\n  height: 100%;\n  width: ${(p) => `calc(100% / ${p.sections})`};\n  transition: transform 0.4s;\n  transform: ${(p) => `translateX(${p.selectedIndex * 100}%)`};\n`\n","import { Box } from '../../Box'\nimport { SegmentedControl, SegmentedControlProps } from '../SegmentedControl'\nimport React, { ReactNode } from 'react'\n\nexport const Container = <T,>(props: SegmentedControlProps<T>) => {\n  const [value, setValue] = React.useState(props.value)\n\n  return (\n    <>\n      <SegmentedControl {...props} value={value} onChange={setValue} />\n      <Box p={'16px'}>\n        <p>Selected value: {value as ReactNode}</p>\n      </Box>\n    </>\n  )\n}\n","import type { Meta, StoryObj } from '@storybook/react'\nimport React from 'react'\nimport { SegmentedControl, SegmentedControlProps } from '../SegmentedControl'\nimport { Container } from './Container'\n\ntype StoryMeta = Meta<typeof SegmentedControl>\ntype Story = StoryObj<typeof SegmentedControl>\n\nconst meta: StoryMeta = {\n  title: 'SegmentedControl',\n  component: SegmentedControl,\n}\nexport default meta\n\nconst Template = <T,>(props: SegmentedControlProps<T>) => (\n  <Container {...props} />\n)\nexport const Default: Story = {\n  render: Template,\n  args: {\n    options: [\n      { label: 'Option 1', value: 'option1' },\n      { label: 'Option 2', value: 'option2', tag: 'tag 2' },\n    ],\n    value: 'option1',\n    showTag: false,\n  },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            //disabling these until we sync with design on this\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n}\n\nexport const Custom: Story = {\n  render: Template,\n  args: {\n    options: [\n      { label: 'Option 1', value: 1 },\n      { label: 'Option 2', value: 2, tag: 'tag 2' },\n      { label: 'Option 3', value: 3, tag: 'tag 3', isDisabled: true },\n    ],\n    value: 2,\n    showTag: true,\n    styles: {\n      tagText: 'liquorice',\n      tagBorder: 'liquorice',\n      tagBg: 'cream',\n      selectedText: 'liquorice',\n      text: 'liquorice',\n      background: 'marshmallowPink',\n      toggle: 'cream',\n    },\n  },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            //disabling these until we sync with design on this\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n}\n"],"names":["cov_6f342n0lw","actualCoverage","ToggleButton","value","onChange","isSelected","isDisabled","children","s","React","Wrapper","type","VisuallyHiddenInput","name","checked","onClick","cov_2itvshnmy0","SegmentedControl","options","showTag","styles","tagBorder","tagText","tagBg","selectedText","text","background","toggle","backgroundColor","option","bgColor","StyledWrapper","StyledTag","borderColor","color","label","StyledText","selectedTextColor","selectedIndex","findIndex","sections","toggleColor","styled","theme","medium","Text","p","colors","BORDER_RADIUS","Box","cov_o7z1um1mm","Container","props","setValue","meta","title","component","Template","Default","render","args","tag","parameters","a11y","config","rules","id","enabled","Custom","docs","source","originalSource"],"mappings":"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"}