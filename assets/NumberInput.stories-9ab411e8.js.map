{"version":3,"file":"NumberInput.stories-9ab411e8.js","sources":["../../src/NumberInput/NumberInput.tsx","../../src/NumberInput/Container.tsx","../../src/NumberInput/Collection.tsx"],"sourcesContent":["import React, {\n  FocusEvent,\n  FormEvent,\n  forwardRef,\n  ForwardedRef,\n  MouseEvent,\n} from 'react'\nimport styled from 'styled-components'\n\nimport { Box } from '../Box'\nimport { Icon } from '../Icon'\nimport { Field } from '../fields/Field'\nimport { CommonFieldProps } from '../fields/commonFieldTypes'\n\nimport { useUniqueId } from '../utils/id'\nimport {\n  Input,\n  StyledFrontIcon,\n  StyledTrailingIcon,\n} from '../fields/components/CommonInput'\n\nexport interface Props extends CommonFieldProps {\n  type?: 'number'\n  placeholder: string\n  name?: string\n  value: string\n  onBlur?: (e: FocusEvent<HTMLInputElement>) => void\n  min?: number\n  max?: number\n  strict?: boolean\n  roundCurrency?: boolean\n  step?: number\n}\n\n/** on change or on input required */\ntype InputProps =\n  | {\n      /** on change is required and on input optional */\n      onChange: (e: string | number) => void\n      onInputChange?: (e: FormEvent<HTMLInputElement>) => void\n    }\n  | {\n      /** on input is required and on change optional */\n      onChange?: (e: string | number) => void\n      onInputChange: (e: FormEvent<HTMLInputElement>) => void\n    }\n\nexport type NumberInputProps = Props & InputProps\n\nexport const NumberInput = forwardRef(function NumberInput(\n  {\n    id: idProp,\n    type = 'number',\n    placeholder,\n    name,\n    value,\n    onChange,\n    onInputChange,\n    onBlur,\n    roundCurrency,\n    min = -999999,\n    max = 999999,\n    strict,\n    step = 0,\n    disabled = false,\n    error = false,\n    frontIcon,\n    trailingIcon,\n    fallbackStyle,\n    ...fieldProps\n  }: NumberInputProps,\n  ref: ForwardedRef<HTMLInputElement>,\n) {\n  const id = useUniqueId(idProp)\n\n  // Check whether the min/max value exists is within the specified range\n  const isInRange = (value: number) => {\n    if (min && value < min) {\n      return false\n    }\n\n    if (max && value > max) {\n      return false\n    }\n\n    return true\n  }\n\n  // Round the number to two decimal places\n  const roundNumber = (event: number) => {\n    return Math.round(event * 100) / 100\n  }\n\n  const handleStrictValue = (event: number): number => {\n    if (isInRange(event)) {\n      return event\n    }\n\n    // Get the difference between the max (or min) and the current value\n    const dMax = max - event\n    const dMin = min - event\n\n    // if the difference is zero return the min value\n    if (!dMax) {\n      return min\n    }\n\n    // if the difference is zero return the max value\n    if (!dMin) {\n      return max\n    }\n\n    // Convert all negative numbers to positive numbers (-90 becomes 90) then,\n    // if the converted max diff is less than the min diff, return the max (eg. 100), otherwise return the min (eg. 0)\n    return Math.abs(dMax) < Math.abs(dMin) ? max : min\n  }\n\n  const handleChange = (event: string) => {\n    if (onChange === undefined) return\n    const EMPTY_INPUT = ''\n\n    if (event === EMPTY_INPUT) {\n      onChange(event)\n    } else {\n      const formattedEvent = Number(event)\n\n      const amount = roundCurrency\n        ? roundNumber(formattedEvent)\n        : formattedEvent\n\n      if (strict) {\n        onChange(handleStrictValue(amount))\n      } else {\n        onChange(amount)\n      }\n    }\n  }\n  // Increment or decrement the value when clicking the Spinner controls\n  const incrementValue = (event: MouseEvent<HTMLButtonElement>) => {\n    if (onChange === undefined) return\n    event.preventDefault()\n    const currentValue = Number(value) + step\n\n    if (isInRange(currentValue)) {\n      onChange(roundNumber(currentValue))\n    }\n  }\n\n  const decrementValue = (event: MouseEvent<HTMLButtonElement>) => {\n    if (onChange === undefined) return\n    event.preventDefault()\n    const currentValue = Number(value) - step\n\n    if (isInRange(currentValue)) {\n      onChange(roundNumber(currentValue))\n    }\n  }\n\n  return (\n    <Field {...fieldProps} htmlFor={id} error={error}>\n      <Box flex alignItems=\"center\" justifyContent=\"flex-start\">\n        {frontIcon && (\n          <StyledFrontIcon\n            disabled={disabled}\n            render={frontIcon}\n            color=\"sesame\"\n          />\n        )}\n        <Input\n          ref={ref}\n          error={error}\n          disabled={disabled}\n          type={type}\n          id={id}\n          name={name}\n          placeholder={placeholder}\n          value={value}\n          frontIcon={frontIcon}\n          step={step}\n          fallbackStyle={fallbackStyle}\n          onChange={(e: FormEvent<HTMLInputElement>) => {\n            onChange && handleChange(e.currentTarget.value)\n            onInputChange && onInputChange(e)\n          }}\n          onBlur={onBlur}\n        />\n\n        {onChange && step > 0 && (\n          <Spinner>\n            <SpinnerButton onClick={incrementValue} disabled={disabled}>\n              <Icon render=\"caret\" rotate={180} color=\"sesame\" size={24} />\n            </SpinnerButton>\n\n            <SpinnerButton onClick={decrementValue} disabled={disabled}>\n              <Icon render=\"caret\" color=\"sesame\" size={24} />\n            </SpinnerButton>\n          </Spinner>\n        )}\n        {trailingIcon && !step && (\n          <StyledTrailingIcon\n            disabled={disabled}\n            render={trailingIcon}\n            color=\"sesame\"\n          />\n        )}\n      </Box>\n    </Field>\n  )\n})\n\nconst Spinner = styled.div`\n  position: relative;\n  display: flex;\n  right: 58px;\n  margin-right: -58px;\n`\n\ninterface IButton {\n  disabled: boolean\n}\n\nconst SpinnerButton = styled.button<IButton>`\n  width: 24px;\n  height: 24px;\n  background-color: transparent;\n  border: 0;\n  padding: 0;\n  cursor: ${({ disabled }) => (disabled ? 'not-allowed' : 'pointer')};\n`\n","import React, { useState } from 'react'\n\nimport { NumberInput } from './NumberInput'\n\nexport const Container = () => {\n  const [value, setValue] = useState('')\n\n  return (\n    <form>\n      <NumberInput\n        id=\"numberInput\"\n        label=\"Amount paid\"\n        name=\"numberInput\"\n        // @ts-expect-error onChange type is too broad and should be handled differently\n        onChange={setValue}\n        placeholder=\"100.00\"\n        prefix=\"$\"\n        value={value}\n        min={-100}\n        max={180}\n        step={10}\n        strict\n        roundCurrency\n        required\n      />\n    </form>\n  )\n}\n","import React, { FC, ReactNode, useState } from 'react'\nimport styled from 'styled-components'\n\nimport { Text } from '../Text'\nimport { Box } from '../Box'\nimport { NumberInput, NumberInputProps } from './NumberInput'\nimport { noop } from '../utils/noop'\nimport { SupportMessage } from '../SupportMessage'\n\nconst variationList: NumberInputProps[] = [\n  {\n    id: 'days',\n    placeholder: '+44 7123 456789',\n    errorMsg: 'This field is required',\n    label: 'Phone number',\n    onChange: noop,\n    onInputChange: noop,\n    onBlur: noop,\n    value: '',\n  },\n]\n\nexport const CollectionPage: FC = () => {\n  const [, setValue] = useState('')\n\n  return (\n    <Box flex direction=\"column\">\n      {variationList.map(({ id, placeholder, errorMsg, label }) => {\n        return (\n          <Box key={id} flex direction=\"column\" mb=\"32px\">\n            <Title tag=\"span\" typo=\"header-medium\">\n              NumberInput variations\n            </Title>\n            <Row label=\"Generic\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                placeholder={placeholder}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Fallback\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                placeholder={placeholder}\n                fallbackStyle={true}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Disabled\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                placeholder={placeholder}\n                disabled={true}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Required\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                required={true}\n                placeholder={placeholder}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Leading Icon\">\n              <NumberInput\n                id={id}\n                label={label}\n                frontIcon=\"iphone\"\n                value=\"\"\n                placeholder={placeholder}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Trailing Icon\">\n              <NumberInput\n                id={id}\n                label={label}\n                trailingIcon=\"iphone\"\n                value=\"\"\n                placeholder={placeholder}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Stepper\">\n              <NumberInput\n                id={id}\n                label={label}\n                step={10}\n                value=\"\"\n                placeholder={placeholder}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Assistive text\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                placeholder={placeholder}\n                assistiveText=\"Some assistive text\"\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Completed\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                placeholder={placeholder}\n                error={false}\n                completed={true}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"As title\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                renderAsTitle={true}\n                placeholder={placeholder}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Error\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                required={true}\n                placeholder={placeholder}\n                assistiveText=\"Some assistive text\"\n                error={true}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"React element error\">\n              <NumberInput\n                id={id}\n                label={label}\n                required={true}\n                value=\"\"\n                placeholder={placeholder}\n                error={true}\n                errorMsg={\n                  <SupportMessage type=\"warning\" description=\"error!!\" />\n                }\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Fallback Error\">\n              <NumberInput\n                id={id}\n                label={label}\n                required={true}\n                value=\"\"\n                placeholder={placeholder}\n                fallbackStyle={true}\n                error={true}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n          </Box>\n        )\n      })}\n    </Box>\n  )\n}\n\nconst Row: FC<{ label: string; children?: ReactNode }> = ({\n  label,\n  children,\n}) => {\n  return (\n    <RowWrapper mt=\"32px\">\n      <Box width=\"140px\">\n        <Text tag=\"span\" typo=\"label-large\">\n          {label}\n        </Text>\n      </Box>\n      {children}\n    </RowWrapper>\n  )\n}\n\nconst RowWrapper = styled(Box)`\n  display: flex;\n  flex-direction: row;\n  gap: 16px;\n`\n\nconst LABEL_WIDTH = '140px'\n\nconst Title = styled(Text)`\n  margin-bottom: 12px;\n  font-size: 18px;\n  line-height: 20px;\n  margin-left: ${LABEL_WIDTH};\n`\n"],"names":["NumberInput","forwardRef","idProp","type","placeholder","name","value","onChange","onInputChange","onBlur","roundCurrency","min","max","strict","step","disabled","error","frontIcon","trailingIcon","fallbackStyle","fieldProps","ref","id","useUniqueId","isInRange","value2","roundNumber","event","handleStrictValue","dMax","dMin","handleChange","formattedEvent","amount","incrementValue","currentValue","decrementValue","jsx","Field","jsxs","Box","StyledFrontIcon","Input","e","Spinner","SpinnerButton","Icon","StyledTrailingIcon","styled","Container","setValue","useState","variationList","noop","CollectionPage","errorMsg","label","Title","Row","SupportMessage","children","RowWrapper","Text","LABEL_WIDTH"],"mappings":"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"}