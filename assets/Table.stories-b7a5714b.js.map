{"version":3,"file":"Table.stories-b7a5714b.js","sources":["../../src/Table/components/commonComponents.tsx","../../src/Table/components/TableHeader.tsx","../../src/Table/helpers.ts","../../src/Table/components/RowActions.tsx","../../src/Table/components/TableRow.tsx","../../src/Table/Table.tsx","../../src/Table/storyUtils.tsx"],"sourcesContent":["import styled, { css } from 'styled-components'\nimport { fontStyleMapping } from '../../Text/fontMapping'\nimport { theme } from '../../theme'\nimport { TableStylesProps } from '../types'\n\nexport const StyledTable = styled.table<TableStylesProps>`\n  width: 100%;\n  height: 100%;\n  border-collapse: collapse;\n  overflow: auto;\n  background: ${theme.colors.coconut};\n  border-spacing: 30px;\n`\n\nexport const StyledHeaderCell = styled.th<TableStylesProps>`\n  background: ${theme.colors.coconut};\n  position: ${({ fixedHeader }) => (fixedHeader ? 'sticky' : 'auto')};\n  top: 0;\n  z-index: 2;\n  text-align: left;\n  vertical-align: bottom;\n  ${fontStyleMapping['label']};\n  padding-left: 8px;\n  padding-right: 8px;\n  padding-top: 8px;\n  padding-bottom: 8px;\n\n  ${({ headerColor }) =>\n    headerColor &&\n    css`\n      background: ${theme.colors[headerColor]};\n    `}\n\n  ${({ headerHeight }) =>\n    headerHeight &&\n    css`\n      height: ${headerHeight};\n    `}\n\n  ${({ maxWidth }) =>\n    maxWidth &&\n    css`\n      max-width: ${maxWidth};\n    `}\n\n  ${({ minWidth }) =>\n    minWidth &&\n    css`\n      min-width: ${minWidth};\n    `}\n    \n  ${({ columnPadding }) =>\n    columnPadding &&\n    css`\n      padding-left: ${columnPadding};\n      padding-right: ${columnPadding};\n    `};\n`\n\nexport const StyledCell = styled.td<TableStylesProps>`\n  vertical-align: middle;\n  padding-left: 8px;\n  padding-right: 8px;\n  padding-top: 8px;\n  padding-bottom: 8px;\n\n  ${({ hideOverflow }) =>\n    hideOverflow &&\n    css`\n      overflow: hidden;\n    `};\n\n  ${({ noWrapContent }) =>\n    noWrapContent &&\n    css`\n      white-space: nowrap;\n    `};\n\n  ${({ truncateContent }) =>\n    truncateContent &&\n    css`\n      overflow: hidden;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n    `};\n\n  ${({ stickyCell }) =>\n    stickyCell &&\n    css`\n      position: sticky;\n      right: 0;\n    `};\n\n  ${({ rowPadding }) =>\n    rowPadding &&\n    css`\n      padding-top: ${rowPadding};\n      padding-bottom: ${rowPadding};\n    `};\n\n  ${({ columnPadding }) =>\n    columnPadding &&\n    css`\n      padding-left: ${columnPadding};\n      padding-right: ${columnPadding};\n    `};\n\n  ${({ maxWidth }) =>\n    maxWidth &&\n    css`\n      max-width: ${maxWidth};\n    `}\n\n  ${({ rowActionsBgColor }) =>\n    rowActionsBgColor &&\n    css`\n      background: ${theme.colors[rowActionsBgColor]};\n    `}\n`\n\nexport const StyledRow = styled.tr<TableStylesProps>`\n  background: ${theme.colors.custard};\n\n  ${({ rowBorderColor }) =>\n    rowBorderColor &&\n    css`\n      border-bottom: 1px solid ${theme.colors[rowBorderColor]};\n    `}\n\n  ${({ rowColor }) =>\n    rowColor &&\n    css`\n      background: ${theme.colors[rowColor]};\n    `}\n\n  ${({ stripedColor }) =>\n    stripedColor &&\n    css`\n      &:nth-child(even) {\n        background: ${theme.colors[stripedColor]};\n      }\n    `}\n`\n","import React from 'react'\nimport { TableHeaderProps } from '../types'\nimport { StyledHeaderCell, StyledRow } from './commonComponents'\n\nexport const TableHeader = <T extends object>({\n  columns,\n  fixedHeader,\n  headerColor,\n  rowActions,\n  headerHeight,\n  columnPadding,\n  expandable,\n}: TableHeaderProps<T>) => {\n  return (\n    <StyledRow>\n      {columns.map((column, columnIndex) => (\n        <StyledHeaderCell\n          key={columnIndex}\n          fixedHeader={fixedHeader}\n          headerHeight={headerHeight}\n          minWidth={column.minWidth}\n          maxWidth={column.maxWidth}\n          headerColor={headerColor}\n          columnPadding={columnPadding}\n        >\n          {column.name}\n        </StyledHeaderCell>\n      ))}\n      {(expandable || rowActions) && (\n        <StyledHeaderCell\n          fixedHeader={fixedHeader}\n          stickyCell={true}\n          minWidth={rowActions?.minWidth}\n          headerColor={headerColor}\n          columnPadding={columnPadding}\n        >\n          Actions\n        </StyledHeaderCell>\n      )}\n    </StyledRow>\n  )\n}\n","import { ReactElement, isValidElement } from 'react'\n\nexport const isReactElement = (obj: unknown): obj is ReactElement => {\n  return isValidElement(obj)\n}\n\nexport const isMappedReactElement = (obj: unknown): obj is ReactElement[] => {\n  if (!Array.isArray(obj)) return false\n  if (!obj[0]) return false\n  if (!isValidElement(obj[0])) return false\n  const allReactElements = obj.every(\n    (val, i, arr) => typeof val === typeof arr[0],\n  )\n  return allReactElements\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box } from '../../Box'\nimport { Button } from '../../Button'\nimport { IconStrict } from '../../IconStrict'\nimport { focusOutlineStyle } from '../../utils/focusOutline'\nimport { isReactElement } from '../helpers'\nimport { RowActionsProps } from '../types'\nimport { StyledCell } from './commonComponents'\n\nexport const RowActions = <T extends object>({\n  rowData,\n  rowActions,\n  expandable,\n  isExpanded,\n  toggleExpansion,\n}: RowActionsProps<T>) => {\n  return (\n    <StyledCell\n      stickyCell={Boolean(rowActions) || Boolean(expandable)}\n      rowActionsBgColor={rowActions?.bgColor}\n    >\n      <Box flex alignItems=\"center\" justifyContent=\"flex-end\">\n        {rowActions &&\n          rowActions.actions?.map((action, actionIndex) => {\n            if (!action.showCondition || action.showCondition(rowData)) {\n              return (\n                <Wrapper flex key={actionIndex}>\n                  {isReactElement(action.element) &&\n                    React.cloneElement(action.element, {\n                      onClick: () => action.onClick(rowData),\n                      tabIndex: 0,\n                      className: 'reactElementRowAction',\n                    })}\n                  {action.genericButton && !isReactElement(action.element) && (\n                    <Button\n                      {...action.genericButton}\n                      handleClick={() => action.onClick(rowData)}\n                    >\n                      {action.genericButton.children}\n                    </Button>\n                  )}\n                  {action.iconButton && (\n                    <IconStrict\n                      {...action.iconButton}\n                      handleClick={() => action.onClick(rowData)}\n                    />\n                  )}\n                </Wrapper>\n              )\n            }\n            return null\n          })}\n        {expandable && expandable(rowData) && (\n          <CaretIcon\n            render=\"caret\"\n            handleClick={() => toggleExpansion()}\n            size={36}\n            isOpen={isExpanded}\n            backgroundColor=\"cream\"\n          />\n        )}\n      </Box>\n    </StyledCell>\n  )\n}\n\nconst Wrapper = styled(Box)`\n  white-space: nowrap;\n  margin-right: 8px;\n\n  &:last-child {\n    margin-right: 0px;\n  }\n\n  .reactElementRowAction {\n    cursor: pointer;\n    ${focusOutlineStyle}\n  }\n`\n\nconst CaretIcon = styled(IconStrict)<{ isOpen?: boolean }>(\n  ({ isOpen }) => `\n    transform: ${isOpen ? 'rotate(90deg)' : 'rotate(0deg)'};\n    transition: transform 0.3s ease;\n  `,\n)\n","import React, { ReactElement, ReactNode, useState } from 'react'\nimport { isMappedReactElement, isReactElement } from '../helpers'\nimport { TableRowProps } from '../types'\nimport { RowActions } from './RowActions'\nimport { StyledCell, StyledRow } from './commonComponents'\n\nexport const TableRow = <T extends object>({\n  rowData,\n  rowIndex,\n  columns,\n  subRows,\n  subTable,\n  stripedColor,\n  rowActions,\n  rowColor,\n  rowBorderColor,\n  rowPadding,\n  columnPadding,\n  showActions,\n  expandable,\n}: TableRowProps<T>) => {\n  const [expandedRows, setExpandedRows] = useState<number[]>([])\n\n  const toggleRowExpansion = (rowIndex: number) => {\n    setExpandedRows((prevState) =>\n      prevState.includes(rowIndex)\n        ? prevState.filter((index) => index !== rowIndex)\n        : [...prevState, rowIndex],\n    )\n  }\n\n  const subRowsData = subRows?.rows(rowData)\n  const subTableData = subTable?.table(rowData)\n  const showSubRowsOnExpand =\n    subRows?.showOnExpand && subRows?.showOnExpand(rowData)\n  const showSubTableOnExpand =\n    subTable?.showOnExpand && subTable?.showOnExpand(rowData)\n\n  const showActionsCell = expandable || rowActions\n  const expandSubProp = showActionsCell ? columns.length + 1 : columns.length\n\n  return (\n    <>\n      <StyledRow\n        stripedColor={stripedColor}\n        rowColor={rowColor}\n        rowBorderColor={rowBorderColor}\n      >\n        {columns.map((column, columnIndex) => {\n          let cellContent: ReactNode\n          if (column.cell) {\n            cellContent = column.cell(rowData, rowIndex, column, rowIndex)\n          }\n\n          return (\n            <StyledCell\n              key={columnIndex}\n              rowPadding={rowPadding}\n              columnPadding={columnPadding}\n              minWidth={column.minWidth}\n              maxWidth={column.maxWidth}\n              noWrapContent={column.noWrapContent}\n              truncateContent={column.truncateContent}\n              hideOverflow={column.hideOverflow}\n            >\n              {cellContent}\n            </StyledCell>\n          )\n        })}\n\n        {(showActionsCell || showActions) && (\n          <RowActions\n            expandable={expandable}\n            rowActions={rowActions}\n            rowData={rowData}\n            isExpanded={expandedRows.includes(rowIndex)}\n            toggleExpansion={() => toggleRowExpansion(rowIndex)}\n          />\n        )}\n      </StyledRow>\n\n      {/**\n       * This could be extracted out and cleaned up\n       * this section is for expanded rows only\n       * Items rendered here wont show unless expanded\n       */}\n      {expandedRows.includes(rowIndex) && (\n        <>\n          {subRows &&\n            subRowsData &&\n            showSubRowsOnExpand &&\n            isReactElement(subRowsData) &&\n            React.cloneElement(subRowsData as ReactElement, {\n              rowPadding: rowPadding,\n              columnPadding: columnPadding,\n            })}\n\n          {subRows &&\n            subRowsData &&\n            showSubRowsOnExpand &&\n            isMappedReactElement(subRowsData) &&\n            (subRowsData as ReactElement[]).map((row) =>\n              React.cloneElement(row, {\n                rowPadding: rowPadding,\n                showActions: showActionsCell,\n              }),\n            )}\n\n          {subTable && showSubTableOnExpand && subTableData && (\n            <StyledCell colSpan={expandSubProp}>\n              {React.cloneElement(subTableData, {\n                rowPadding: rowPadding,\n                columnPadding: columnPadding,\n              })}\n            </StyledCell>\n          )}\n        </>\n      )}\n\n      {/**\n       * This could be extracted out and cleaned up\n       * this section is for rendering things under a row,\n       * without the need to expand.\n       * Items rendered here wont show when expanded\n       */}\n      {subRows &&\n        subRowsData &&\n        !showSubRowsOnExpand &&\n        isReactElement(subRowsData) &&\n        React.cloneElement(subRowsData as ReactElement, {\n          rowPadding: rowPadding,\n          columnPadding: columnPadding,\n        })}\n\n      {subRows &&\n        subRowsData &&\n        !showSubRowsOnExpand &&\n        isMappedReactElement(subRowsData) &&\n        (subRowsData as ReactElement[]).map((row) =>\n          React.cloneElement(row, {\n            rowPadding: rowPadding,\n            columnPadding: columnPadding,\n          }),\n        )}\n\n      {subTable && subTableData && !showSubTableOnExpand && (\n        <StyledCell colSpan={expandSubProp}>\n          {React.cloneElement(subTableData, {\n            rowPadding: rowPadding,\n            columnPadding: columnPadding,\n          })}\n        </StyledCell>\n      )}\n    </>\n  )\n}\n","import React from 'react'\nimport { Text } from '../Text'\nimport { TableHeader } from './components/TableHeader'\nimport { TableRow } from './components/TableRow'\nimport { StyledCell, StyledTable } from './components/commonComponents'\nimport { TableProps } from './types'\n\n/**\n * A table component that displays data with various features such as expandable rows, striped rows, and fixed headers.\n *\n * Caveats:\n * - subRows should always have the same columns as the Parent table.\n * - stripedColor wont be applied to subRows or subTables.\n * - rowActions will always need an onClick, this will be automatically passed onto the ReactNode you place & will be selectable\n * - rows will scale depending on the cell content size\n *\n * Improvements:\n * - It would be nice if we expandable logic inside this component, e.g the presence of certain props would automatically add this\n * -\n *\n * @template T - The type of data the table displays.\n * @property {T[]} data - Array of data to be displayed in the table.\n * @property {TableColumn<T>[]} columns - Array of columns to display in the table.\n * @property {boolean} [fixedHeader=false] - If true, the table header will be fixed/sticky.\n * @property {string} [headerHeight] - Sets the height of the header.\n * @property {function(T): boolean} [expandable] - A function to determine if a row is expandable.\n * @property {Color} [stripedColor] - If present, the table rows will have alternating colors.\n * @property {Color} [headerColor='mascarpone'] - The color for the table header.\n * @property {Color} [rowColor='custard'] - The default color for each table row.\n * @property {Color} [rowBorderColor='oatmeal'] - The default color for each table row border.\n * @property {ReactElement} [subTable] - A React element to show when a row is expanded.\n * @property {Object} [subRows] - Settings for sub rows.\n * @property {function(T): ReactElement} subRows.rows - Function that returns a React element for the sub row.\n * @property {boolean} [subRows.showOnExpand=false] - If true, the sub rows will only be shown when the row is expanded.\n * @property {RowAction<T>[]} [rowActions] - Array of actions that can be performed on each row.\n * @property {string} [rowActionsMinWidth] - The minimum width for the row actions column.\n * @property {string} [rowPadding] - The padding for each row, essentially the height.\n * @property {string} [noDataContent] - The text to show when there is no available data to map through.\n */\nexport const Table = <T extends object>({\n  columns,\n  data,\n  fixedHeader = true,\n  expandable,\n  subTable,\n  subRows,\n  headerHeight,\n  headerColor = 'mascarpone',\n  rowColor = 'custard',\n  stripedColor,\n  rowBorderColor = 'oatmeal',\n  rowActions,\n  rowPadding,\n  columnPadding,\n  noDataContent,\n}: TableProps<T>) => {\n  const showActionsCell = expandable || rowActions\n  const expandSubProp = showActionsCell ? columns.length + 1 : columns.length\n  return (\n    <StyledTable>\n      <thead>\n        <TableHeader\n          columns={columns}\n          fixedHeader={fixedHeader}\n          headerHeight={headerHeight}\n          subTable={subTable}\n          headerColor={headerColor}\n          rowActions={rowActions}\n          columnPadding={columnPadding}\n          expandable={expandable}\n        />\n      </thead>\n      <tbody>\n        {data.length === 0 && (\n          <StyledCell\n            colSpan={expandSubProp}\n            rowPadding={rowPadding}\n            columnPadding={columnPadding}\n          >\n            {noDataContent ? (\n              noDataContent\n            ) : (\n              <Text align=\"center\">No available data</Text>\n            )}\n          </StyledCell>\n        )}\n        {data.length !== 0 &&\n          data.map((row, rowIndex) => (\n            <TableRow\n              key={rowIndex}\n              rowData={row}\n              rowIndex={rowIndex}\n              columns={columns}\n              rowActions={rowActions}\n              stripedColor={stripedColor}\n              subTable={subTable}\n              subRows={subRows}\n              rowColor={rowColor}\n              rowBorderColor={rowBorderColor}\n              rowPadding={rowPadding}\n              columnPadding={columnPadding}\n              expandable={expandable}\n            />\n          ))}\n      </tbody>\n    </StyledTable>\n  )\n}\n","import React from 'react'\nimport { Button } from '../Button'\nimport { Icon } from '../Icon'\nimport { Tag } from '../Tag'\nimport { Text } from '../Text'\nimport { RowAction } from './types'\n\nexport interface DataRow {\n  id: number\n  name: string\n  type: string\n  ability: string\n  evolves: boolean\n  subRowData?: DataRow[]\n}\n\nconst exampleOnClick = (element: string) =>\n  alert(`onClick from ${element} is working`)\n\nexport const data: DataRow[] = [\n  {\n    id: 1,\n    name: 'Bulbasaur',\n    type: 'Grass/Poison',\n    ability: 'Overgrow',\n    evolves: true,\n    subRowData: [\n      {\n        id: 1,\n        name: 'Bulbasaur',\n        type: 'Grass/Poison',\n        ability: 'Overgrow',\n        evolves: true,\n      },\n      {\n        id: 4,\n        name: 'Charmander',\n        type: 'Fire',\n        ability: 'Blaze',\n        evolves: true,\n      },\n    ],\n  },\n  {\n    id: 4,\n    name: 'Charmander',\n    type: 'Fire',\n    ability: 'Blaze',\n    evolves: true,\n  },\n  {\n    id: 7,\n    name: 'Squirtle',\n    type: 'Water',\n    ability: 'Torrent',\n    evolves: true,\n    subRowData: [\n      {\n        id: 1,\n        name: 'Bulbasaur',\n        type: 'Grass/Poison',\n        ability: 'Overgrow',\n        evolves: true,\n      },\n      {\n        id: 4,\n        name: 'Charmander',\n        type: 'Fire',\n        ability: 'Blaze',\n        evolves: true,\n      },\n    ],\n  },\n  {\n    id: 10,\n    name: 'Caterpie',\n    type: 'Bug',\n    ability: 'Shield Dust',\n    evolves: true,\n  },\n  {\n    id: 13,\n    name: 'Weedle',\n    type: 'Bug/Poison',\n    ability: 'Shield Dust',\n    evolves: true,\n  },\n  {\n    id: 16,\n    name: 'Pidgey',\n    type: 'Normal/Flying',\n    ability: 'Tangled Feet',\n    evolves: true,\n  },\n  {\n    id: 19,\n    name: 'Rattata',\n    type: 'Normal',\n    ability: 'Run Away',\n    evolves: true,\n  },\n  {\n    id: 23,\n    name: 'Ekans',\n    type: 'Poison',\n    ability: 'Intimidate',\n    evolves: true,\n  },\n]\n\nexport const rowActions = [\n  {\n    genericButton: {\n      children: 'generic button',\n      primary: true,\n      smallButton: true,\n    },\n    onClick: () => exampleOnClick('generic button'),\n    showCondition: (row: DataRow) => row.id === 7,\n  },\n  {\n    iconButton: {\n      render: 'info',\n      backgroundColor: 'peanut',\n      size: 36,\n    },\n    onClick: () => exampleOnClick('info icon'),\n    showCondition: (row: DataRow) => row.id === 1,\n  },\n  {\n    label: (\n      <Tag\n        bgColor=\"marshmallowPink\"\n        borderColor=\"marshmallowPink\"\n        color=\"liquorice\"\n        label=\"anything\"\n      />\n    ),\n    onClick: () => exampleOnClick('tag text'),\n    showCondition: (row: DataRow) => row.id === 4,\n  },\n] as RowAction<DataRow>[]\n\nexport const columns = [\n  {\n    name: 'id',\n    cell: (row: DataRow) => row.id,\n    minWidth: '100px',\n  },\n  {\n    name: (\n      <Button\n        primary\n        smallButton\n        onClick={() => exampleOnClick('column button')}\n      >\n        name btn\n      </Button>\n    ),\n    cell: (row: DataRow) => row.name,\n    minWidth: '100px',\n  },\n  {\n    name: (\n      <Tag\n        bgColor=\"marshmallowPink\"\n        borderColor=\"marshmallowPink\"\n        color=\"liquorice\"\n        label=\"ReactNode Header\"\n      />\n    ),\n    cell: (row: DataRow) => (\n      <Tag\n        bgColor=\"coconut\"\n        borderColor=\"coconut\"\n        color=\"liquorice\"\n        label={row.type}\n      />\n    ),\n    minWidth: '200px',\n  },\n  {\n    name: 'ability',\n    cell: (row: DataRow) => <Text typo=\"headline-small\">{row.ability}</Text>,\n  },\n  {\n    name: 'evolves',\n    cell: (row: DataRow) => (\n      <Button textBtn={row.evolves}>{row.evolves.toString()}</Button>\n    ),\n    minWidth: '100px',\n    maxWidth: '100px',\n  },\n  {\n    name: 'e.g1',\n    cell: () => 'example data',\n    minWidth: '150px',\n  },\n  {\n    name: 'e.g2',\n    cell: () => 'example data2',\n    minWidth: '150px',\n  },\n  {\n    name: 'e.g3',\n    cell: () => 'example data3',\n    minWidth: '150px',\n  },\n  {\n    name: 'e.g4',\n    cell: () => 'really super long text that should be cut off',\n    maxWidth: '200px',\n    truncateContent: true,\n  },\n  {\n    name: 'e.g5',\n    cell: () => 'example data5',\n    minWidth: '150px',\n  },\n]\n\nexport const columnsV2 = [\n  {\n    name: 'name',\n    cell: (row: DataRow) => <Text typo=\"headline-small\">{row.name}</Text>,\n  },\n  {\n    name: 'evolves',\n    cell: () => <Icon render=\"plus-circle\" size={16} />,\n  },\n  {\n    name: 'ability',\n    cell: (row: DataRow) => <Text typo=\"headline-small\">{row.ability}</Text>,\n  },\n  {\n    name: 'e.g1',\n    cell: () => 'example data',\n  },\n  {\n    name: 'e.g2',\n    cell: () => 'example data2',\n  },\n  {\n    name: 'e.g3',\n    cell: () => 'example data3',\n  },\n]\n"],"names":["StyledTable","styled","theme","StyledHeaderCell","fixedHeader","fontStyleMapping","headerColor","css","headerHeight","maxWidth","minWidth","columnPadding","StyledCell","hideOverflow","noWrapContent","truncateContent","stickyCell","rowPadding","rowActionsBgColor","StyledRow","rowBorderColor","rowColor","stripedColor","TableHeader","columns","rowActions","expandable","jsxs","column","columnIndex","jsx","isReactElement","obj","isValidElement","isMappedReactElement","val","i","arr","RowActions","rowData","isExpanded","toggleExpansion","Box","_a","action","actionIndex","Wrapper","React","Button","IconStrict","CaretIcon","focusOutlineStyle","isOpen","TableRow","rowIndex","subRows","subTable","showActions","expandedRows","setExpandedRows","useState","toggleRowExpansion","rowIndex2","prevState","index","subRowsData","subTableData","showSubRowsOnExpand","showSubTableOnExpand","showActionsCell","expandSubProp","Fragment","cellContent","row","Table","data","noDataContent","Text","exampleOnClick","element","Tag","columnsV2","Icon"],"mappings":"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"}