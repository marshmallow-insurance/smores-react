{"version":3,"file":"NumberInput.stories-Lg-XISvo.js","sources":["../../src/NumberInput/NumberInput.tsx","../../src/NumberInput/storybook/Collection.tsx","../../src/NumberInput/storybook/Container.tsx","../../src/NumberInput/storybook/NumberInput.stories.tsx"],"sourcesContent":["import React, {\n  FocusEvent,\n  FormEvent,\n  ForwardedRef,\n  MouseEvent,\n  forwardRef,\n} from 'react'\nimport styled from 'styled-components'\n\nimport { Box } from '../Box'\nimport { Icon } from '../Icon'\nimport { Field } from '../fields/Field'\nimport { CommonFieldProps } from '../fields/commonFieldTypes'\n\nimport {\n  Input,\n  StyledFrontIcon,\n  StyledTrailingIcon,\n} from '../fields/components/CommonInput'\nimport { useUniqueId } from '../utils/id'\n\nexport interface Props extends CommonFieldProps {\n  type?: 'number'\n  placeholder: string\n  name?: string\n  value: string\n  onBlur?: (e: FocusEvent<HTMLInputElement>) => void\n  min?: number\n  max?: number\n  step?: number\n}\n\n/** on change or on input required */\ntype InputProps =\n  | {\n      /** on change is required and on input optional */\n      onChange: (e: string | number) => void\n      onInputChange?: (e: FormEvent<HTMLInputElement>) => void\n    }\n  | {\n      /** on input is required and on change optional */\n      onChange?: (e: string | number) => void\n      onInputChange: (e: FormEvent<HTMLInputElement>) => void\n    }\n\nexport type NumberInputProps = Props & InputProps\n\nexport const NumberInput = forwardRef(function NumberInput(\n  {\n    id: idProp,\n    type = 'number',\n    placeholder,\n    name,\n    value,\n    onChange,\n    onInputChange,\n    onBlur,\n    min = -999999,\n    max = 999999,\n    step = 0,\n    disabled = false,\n    error = false,\n    frontIcon,\n    trailingIcon,\n    fallbackStyle,\n    ...fieldProps\n  }: NumberInputProps,\n  ref: ForwardedRef<HTMLInputElement>,\n) {\n  const id = useUniqueId(idProp)\n\n  // Check whether the min/max value exists is within the specified range\n  const isInRange = (value: number) => {\n    if (min && value < min) {\n      return false\n    }\n\n    if (max && value > max) {\n      return false\n    }\n\n    return true\n  }\n\n  // Round the number to two decimal places\n  const roundNumber = (event: number) => {\n    return Math.round(event * 100) / 100\n  }\n\n  const applyMinMax = (value: number) => {\n    if (min && value < min) return min\n    if (max && value > max) return max\n    return value\n  }\n\n  const handleChange = (event: string) => {\n    if (onChange === undefined) return\n    const EMPTY_INPUT = ''\n\n    if (event === EMPTY_INPUT) {\n      onChange(event)\n    } else {\n      const amount = Number(event)\n      const normalisedValue = applyMinMax(amount)\n\n      onChange(normalisedValue)\n    }\n  }\n  // Increment or decrement the value when clicking the Spinner controls\n  const incrementValue = (event: MouseEvent<HTMLButtonElement>) => {\n    if (onChange === undefined) return\n    event.preventDefault()\n    const currentValue = Number(value) + step\n\n    if (isInRange(currentValue)) {\n      onChange(roundNumber(currentValue))\n    }\n  }\n\n  const decrementValue = (event: MouseEvent<HTMLButtonElement>) => {\n    if (onChange === undefined) return\n    event.preventDefault()\n    const currentValue = Number(value) - step\n\n    if (isInRange(currentValue)) {\n      onChange(roundNumber(currentValue))\n    }\n  }\n\n  return (\n    <Field {...fieldProps} htmlFor={id} error={error}>\n      <Box flex alignItems=\"center\" justifyContent=\"flex-start\">\n        {frontIcon && (\n          <StyledFrontIcon\n            $disabled={disabled}\n            render={frontIcon}\n            color=\"sesame\"\n          />\n        )}\n        <Input\n          ref={ref}\n          $error={error}\n          disabled={disabled}\n          type={type}\n          id={id}\n          name={name}\n          placeholder={placeholder}\n          value={value}\n          $frontIcon={frontIcon}\n          step={step}\n          $fallbackStyle={fallbackStyle}\n          onChange={(e: FormEvent<HTMLInputElement>) => {\n            onChange && handleChange(e.currentTarget.value)\n            onInputChange && onInputChange(e)\n          }}\n          onBlur={onBlur}\n        />\n\n        {onChange && step > 0 && (\n          <Spinner>\n            <SpinnerButton\n              aria-label=\"step-up\"\n              onClick={incrementValue}\n              disabled={disabled}\n            >\n              <Icon render=\"caret\" rotate={180} color=\"sesame\" size={24} />\n            </SpinnerButton>\n\n            <SpinnerButton\n              aria-label=\"step-down\"\n              onClick={decrementValue}\n              disabled={disabled}\n            >\n              <Icon render=\"caret\" color=\"sesame\" size={24} />\n            </SpinnerButton>\n          </Spinner>\n        )}\n        {trailingIcon && !step && (\n          <StyledTrailingIcon\n            $disabled={disabled}\n            render={trailingIcon}\n            color=\"sesame\"\n          />\n        )}\n      </Box>\n    </Field>\n  )\n})\n\nconst Spinner = styled.div`\n  position: relative;\n  display: flex;\n  right: 58px;\n  margin-right: -58px;\n`\n\ninterface IButton {\n  disabled: boolean\n}\n\nconst SpinnerButton = styled.button<IButton>`\n  width: 24px;\n  height: 24px;\n  background-color: transparent;\n  border: 0;\n  padding: 0;\n  cursor: ${({ disabled }) => (disabled ? 'not-allowed' : 'pointer')};\n`\n","import React, { FC, ReactNode, useState } from 'react'\nimport styled from 'styled-components'\n\nimport { Box } from '../../Box'\nimport { SupportMessage } from '../../SupportMessage'\nimport { Text } from '../../Text'\nimport { noop } from '../../utils/noop'\nimport { NumberInput, NumberInputProps } from '../NumberInput'\n\nconst variationList: NumberInputProps[] = [\n  {\n    id: 'days',\n    placeholder: '+44 7123 456789',\n    errorMsg: 'This field is required',\n    label: 'Phone number',\n    onChange: noop,\n    onInputChange: noop,\n    onBlur: noop,\n    value: '',\n  },\n]\n\nexport const CollectionPage: FC = () => {\n  const [, setValue] = useState('')\n\n  return (\n    <Box flex direction=\"column\">\n      {variationList.map(({ id, placeholder, errorMsg, label }) => {\n        return (\n          <Box key={id} flex direction=\"column\" mb=\"32px\">\n            <Title tag=\"span\" typo=\"header-medium\">\n              NumberInput variations\n            </Title>\n            <Row label=\"Generic\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                placeholder={placeholder}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Fallback\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                placeholder={placeholder}\n                fallbackStyle={true}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Disabled\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                placeholder={placeholder}\n                disabled={true}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Required\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                required={true}\n                placeholder={placeholder}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Leading Icon\">\n              <NumberInput\n                id={id}\n                label={label}\n                frontIcon=\"iphone\"\n                value=\"\"\n                placeholder={placeholder}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Trailing Icon\">\n              <NumberInput\n                id={id}\n                label={label}\n                trailingIcon=\"iphone\"\n                value=\"\"\n                placeholder={placeholder}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Stepper\">\n              <NumberInput\n                id={id}\n                label={label}\n                step={10}\n                value=\"\"\n                placeholder={placeholder}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Assistive text\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                placeholder={placeholder}\n                assistiveText=\"Some assistive text\"\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Completed\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                placeholder={placeholder}\n                error={false}\n                completed={true}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"As title\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                renderAsTitle={true}\n                placeholder={placeholder}\n                error={false}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Error\">\n              <NumberInput\n                id={id}\n                label={label}\n                value=\"\"\n                required={true}\n                placeholder={placeholder}\n                assistiveText=\"Some assistive text\"\n                error={true}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"React element error\">\n              <NumberInput\n                id={id}\n                label={label}\n                required={true}\n                value=\"\"\n                placeholder={placeholder}\n                error={true}\n                errorMsg={\n                  <SupportMessage type=\"warning\" description=\"error!!\" />\n                }\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n            <Row label=\"Fallback Error\">\n              <NumberInput\n                id={id}\n                label={label}\n                required={true}\n                value=\"\"\n                placeholder={placeholder}\n                fallbackStyle={true}\n                error={true}\n                errorMsg={errorMsg}\n                // @ts-expect-error onChange type is too broad and should be handled differently\n                onChange={setValue}\n              />\n            </Row>\n          </Box>\n        )\n      })}\n    </Box>\n  )\n}\n\nconst Row: FC<{ label: string; children?: ReactNode }> = ({\n  label,\n  children,\n}) => {\n  return (\n    <RowWrapper mt=\"32px\">\n      <Box width=\"140px\">\n        <Text tag=\"span\" typo=\"label-large\">\n          {label}\n        </Text>\n      </Box>\n      {children}\n    </RowWrapper>\n  )\n}\n\nconst RowWrapper = styled(Box)`\n  display: flex;\n  flex-direction: row;\n  gap: 16px;\n`\n\nconst LABEL_WIDTH = '140px'\n\nconst Title = styled(Text)`\n  margin-bottom: 12px;\n  font-size: 18px;\n  line-height: 20px;\n  margin-left: ${LABEL_WIDTH};\n`\n","import React, { useState } from 'react'\n\nimport { NumberInput } from '../NumberInput'\n\nexport const Container = () => {\n  const [value, setValue] = useState('')\n\n  return (\n    <form>\n      <NumberInput\n        id=\"numberInput\"\n        label=\"Amount paid\"\n        name=\"numberInput\"\n        // @ts-expect-error onChange type is too broad and should be handled differently\n        onChange={setValue}\n        placeholder=\"100.00\"\n        value={value}\n        min={-100}\n        max={180}\n        step={10}\n        required\n      />\n    </form>\n  )\n}\n","import React from 'react'\nimport { noop } from '../../utils/noop'\nimport { NumberInput, NumberInputProps } from '../NumberInput'\nimport { CollectionPage } from './Collection'\nimport { Container } from './Container'\n\nexport default {\n  title: 'Number Input',\n  component: NumberInput,\n  argTypes: { onChange: { action: 'changed' } },\n}\n\nconst Template = (props: NumberInputProps) => <NumberInput {...props} />\n\nexport const Default = Template.bind({})\n\nDefault.args = {\n  id: 'total_amount',\n  label: 'Total Amount',\n  name: 'totalAmount',\n  placeholder: '0',\n  onChange: noop,\n}\n\nexport const DefaultFallback = Template.bind({})\n\nDefaultFallback.args = {\n  id: 'telephone',\n  label: 'Telephone number',\n  name: 'telephoneNumber',\n  placeholder: '7123 456789',\n  required: true,\n  onChange: noop,\n  fallbackStyle: true,\n}\n\nexport const Collection = CollectionPage.bind({})\nCollection.parameters = {\n  a11y: {\n    config: {\n      rules: [\n        {\n          //disabling these until we sync with design on this\n          id: 'color-contrast',\n          enabled: false,\n        },\n      ],\n    },\n  },\n}\n\nconst WorkingExampleTemplate = () => <Container />\n\nexport const WorkingExample = WorkingExampleTemplate.bind({})\n"],"names":["cov_gf688ezr7","path","hash","global","gcv","coverageData","coverage","actualCoverage","NumberInput","s","forwardRef","value","id","idProp","type","b","placeholder","name","onChange","onInputChange","onBlur","min","max","step","disabled","error","frontIcon","trailingIcon","fallbackStyle","fieldProps","ref","f","useUniqueId","isInRange","value2","roundNumber","event","Math","round","applyMinMax","handleChange","EMPTY_INPUT","amount","Number","normalisedValue","incrementValue","preventDefault","currentValue","React","createElement","Field","htmlFor","Box","flex","alignItems","justifyContent","StyledFrontIcon","$disabled","color","Input","$error","cov_13sux65cem","variationList","errorMsg","label","noop","CollectionPage","setValue","useState","direction","map","key","mb","Title","tag","typo","Row","required","assistiveText","completed","renderAsTitle","SupportMessage","description","cov_qo0z99n2t","NumberInput_stories","title","component","argTypes","action","Template","props","Default","bind","args","DefaultFallback","Collection","parameters","a11y","config","rules","enabled","WorkingExampleTemplate","Container","WorkingExample","docs","source","originalSource"],"mappings":"kvBA+FQ,SAAAA,GAAA,CAAA,IAAAC,EAAA,8EAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,8EAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,KAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,eAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cccccAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,KAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,OAAA,OAAA,MAAA,EAAA,IAAA,CAAA,KAAA,OAAA,OAAA,MAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,KAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,KAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,OAAA,OAAA,MAAA,EAAA,IAAA,CAAA,KAAA,OAAA,OAAA,MAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,KAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,OAAA,OAAA,MAAA,EAAA,IAAA,CAAA,KAAA,OAAA,OAAA,MAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,KAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,OAAA,OAAA,MAAA,EAAA,IAAA,CAAA,KAAA,OAAA,OAAA,MAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,KAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,OAAA,OAAA,MAAA,EAAA,IAAA,CAAA,KAAA,OAAA,OAAA,MAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,KAAA,YAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,E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AAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAA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"}