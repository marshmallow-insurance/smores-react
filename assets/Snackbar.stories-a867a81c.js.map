{"version":3,"file":"Snackbar.stories-a867a81c.js","sources":["../../src/Snackbar/SnackbarItem.tsx","../../src/Snackbar/SnackbarContainer.tsx","../../src/Snackbar/hooks.ts"],"sourcesContent":["import { Box } from '../Box'\nimport React, { FC } from 'react'\nimport styled from 'styled-components'\nimport { Icon } from '../Icon'\nimport { theme } from '../theme'\nimport { Text } from '../Text'\nimport { Snackbar } from './types'\nimport { useTimeout } from '../hooks'\n\ninterface Props extends Snackbar {\n  deleteSnack: (id: string) => void\n}\n\nexport const SnackbarItem: FC<Props> = ({\n  autoCloseTime = 4,\n  id,\n  message,\n  leadingIcon,\n  canManuallyClose,\n  showCloseIcon,\n  deleteSnack,\n}) => {\n  useTimeout(() => deleteSnack(id), autoCloseTime * 1000)\n\n  return (\n    <SnackItem p=\"16px\" key={id} mt=\"16px\" flex justifyContent=\"space-between\">\n      <Box flex alignItems=\"center\">\n        {leadingIcon && (\n          <Icon mr=\"12px\" render={leadingIcon} size={24} color=\"mascarpone\" />\n        )}\n        <Text typo=\"desc-small\" color=\"mascarpone\">\n          {message}\n        </Text>\n      </Box>\n      {canManuallyClose && (\n        <CloseButton\n          onClick={() => deleteSnack(id)}\n          aria-label={`close snackbar ${message}`}\n        >\n          {showCloseIcon ? (\n            <Icon render=\"cross\" size={16} color=\"mascarpone\" />\n          ) : (\n            <UnderlinedText tag=\"span\" typo=\"desc-medium\" color=\"mascarpone\">\n              Dismiss\n            </UnderlinedText>\n          )}\n        </CloseButton>\n      )}\n    </SnackItem>\n  )\n}\n\nconst SnackItem = styled(Box)`\n  border-radius: 16px;\n  background-color: ${theme.colors.liquorice};\n`\n\nconst CloseButton = styled.button`\n  cursor: pointer;\n`\n\nconst UnderlinedText = styled(Text)`\n  text-decoration: underline;\n`\n","import React, {\n  createContext,\n  FC,\n  useState,\n  useCallback,\n  ReactNode,\n  useContext,\n} from 'react'\nimport styled from 'styled-components'\nimport { SnackbarItem } from './SnackbarItem'\nimport { CreateSnack, Snackbar, SnackbarContextType } from './types'\n\nexport const SnackbarContext = createContext<SnackbarContextType>({\n  addSnackbar: () => {\n    throw new Error('Please add the SnackbarContainer to your application')\n  },\n})\n\nexport const useSnackbarContext = () => useContext(SnackbarContext)\n\nexport const SnackbarContainer: FC<{ children?: ReactNode }> = ({\n  children,\n}) => {\n  let snackbarId = 0\n  const [snackbars, setSnackbars] = useState<Snackbar[]>([])\n\n  // create snackbar unique ID\n  const newSnackId = useCallback(() => {\n    const newId = `MM_SNACKBAR_${snackbarId}`\n    snackbarId++\n    return newId\n  }, [snackbarId])\n\n  const addSnackbar = (snackbar: CreateSnack) => {\n    const newSnack = {\n      ...snackbar,\n      id: newSnackId(),\n    }\n    setSnackbars([...snackbars, newSnack])\n  }\n\n  const deleteSnackbar = (id: string) => {\n    setSnackbars(snackbars.filter((snackbar) => snackbar.id !== id))\n  }\n\n  return (\n    <SnackbarContext.Provider\n      value={{\n        addSnackbar,\n      }}\n    >\n      {children}\n      <SnackbarWrapper>\n        {snackbars.map((snackbar) => (\n          <SnackbarItem\n            key={snackbar.id}\n            {...snackbar}\n            deleteSnack={deleteSnackbar}\n          />\n        ))}\n      </SnackbarWrapper>\n    </SnackbarContext.Provider>\n  )\n}\n\nconst SnackbarWrapper = styled.div`\n  position: fixed;\n  bottom: 35px;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n  width: 90%;\n  max-width: 875px;\n  z-index: 1000;\n`\n","import { useSnackbarContext } from './SnackbarContainer'\n\nexport const useSnackbar = () => {\n  const { addSnackbar } = useSnackbarContext()\n\n  return { addSnackbar }\n}\n"],"names":["SnackbarItem","autoCloseTime","id","message","leadingIcon","canManuallyClose","showCloseIcon","deleteSnack","useTimeout","jsxs","SnackItem","Box","jsx","Icon","Text","CloseButton","UnderlinedText","styled","theme","SnackbarContext","createContext","useSnackbarContext","useContext","SnackbarContainer","children","snackbarId","snackbars","setSnackbars","useState","newSnackId","useCallback","newId","addSnackbar","snackbar","newSnack","deleteSnackbar","SnackbarWrapper","useSnackbar"],"mappings":"6cAaO,MAAAA,EAAA,CAAA,CAAiC,cAAAC,EAAA,EACtB,GAAAC,EAChB,QAAAC,EACA,YAAAC,EACA,iBAAAC,EACA,cAAAC,EACA,YAAAC,CAEF,KACEC,EAAA,IAAAD,EAAAL,CAAA,EAAAD,EAAA,GAAA,EAEAQ,EAAAC,EAAA,CAAA,EAAA,OAAA,GAAA,OAAA,KAAA,GAAA,eAAA,gBAAA,SAAA,CAEID,EAAAE,EAAA,CAAA,KAAA,GAAA,WAAA,SAAA,SAAA,CACGP,GAAAQ,EAAAC,EAAA,CAAA,GAAA,OAAA,OAAAT,EAAA,KAAA,GAAA,MAAA,YAAA,CAAA,EACmEQ,EAAAE,EAAA,CAAA,KAAA,aAAA,MAAA,aAAA,SAAAX,EAAA,CAIpE,EAAA,EACFE,GAAAO,EAEEG,EAAC,CAAA,QAAA,IAAAR,EAAAL,CAAA,EAC8B,aAAA,kBAAAC,CAAA,GACQ,SAAAG,EAAAM,EAAAC,EAAA,CAAA,OAAA,QAAA,KAAA,GAAA,MAAA,YAAA,CAAA,EAAAD,EAAAI,EAAA,CAAA,IAAA,OAAA,KAAA,cAAA,MAAA,aAAA,SAAA,UAAA,CAOnC,CAAA,CAEJ,CAAA,EAAAd,CAAA,GAMRQ,EAAAO,EAAAN,CAAA;AAAA;AAAA,sBAA4BO,EAAA,OAAA,SAAA;AAAA,EAK5BH,EAAAE,EAAA;AAAA;AAAA,EAIAD,EAAAC,EAAAH,CAAA;AAAA;AAAA,44BCjDO,MAAAK,EAAAC,EAAAA,cAAA,CAA2D,YAAA,IAAA,CAE9D,MAAA,IAAA,MAAA,sDAAA,CAAsE,CAE1E,CAAA,EAEOC,EAAA,IAAAC,aAAAH,CAAA,EAEAI,EAAA,CAAA,CAAyD,SAAAC,CAEhE,IAAA,CACE,IAAAC,EAAA,EACA,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,CAAA,CAAA,EAGAC,EAAAC,EAAAA,YAAA,IAAA,CACE,MAAAC,EAAA,eAAAN,CAAA,GACA,OAAAA,IACAM,CAAO,EAAA,CAAAN,CAAA,CAAA,EAGTO,EAAAC,GAAA,CACE,MAAAC,EAAA,CAAiB,GAAAD,EACZ,GAAAJ,EAAA,CACY,EAEjBF,EAAA,CAAA,GAAAD,EAAAQ,CAAA,CAAA,CAAqC,EAGvCC,EAAAjC,GAAA,CACEyB,EAAAD,EAAA,OAAAO,GAAAA,EAAA,KAAA/B,CAAA,CAAA,CAA+D,EAGjE,OAAAO,EACEU,EAAA,SAAiB,CAAhB,MAAA,CACQ,YAAAa,CACL,EACF,SAAA,CAECR,EAAAZ,EAAAwB,EAAA,CAAA,SAAAV,EAAA,IAAAO,GAAArB,EAGGZ,EAAC,CAAA,GAAAiC,EAEK,YAAAE,CACS,EAAAF,EAAA,EAFC,CAAA,EAAA,CAKpB,CAAA,CAAA,CAGN,EAEAG,EAAAnB,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wHC/DO,MAAMoB,EAAc,IAAM,CACzB,KAAA,CAAE,YAAAL,GAAgBX,IAExB,MAAO,CAAE,YAAAW,CAAY,CACvB;;;;;;"}