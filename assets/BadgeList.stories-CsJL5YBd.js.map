{"version":3,"file":"BadgeList.stories-CsJL5YBd.js","sources":["../../src/BadgeList/BadgeList.tsx","../../src/BadgeList/BadgeList.stories.tsx"],"sourcesContent":["import React from 'react'\nimport { Badge, BadgeSize, type BadgeProps } from '../Badge/Badge'\nimport styled from 'styled-components'\nimport { Tooltip } from '../Tooltip'\nimport type { TooltipProps } from '../Tooltip/Tooltip'\nimport { Text } from '../Text'\nimport { theme } from '../theme'\n\ntype WithTooltip = Pick<TooltipProps, 'title' | 'content'> & {\n  position?: TooltipProps['position']\n}\n\nexport type BadgeListBadge = BadgeProps & { tooltip?: WithTooltip }\n\ntype Props = {\n  size?: BadgeProps['size']\n  limit?: number\n  badges: Omit<BadgeListBadge, 'zIndex'>[]\n}\n\n/**\n * ### A list of badges with optional tooltips\n *\n * @param limit - The maximum number of badges to display. If the number of badges exceeds the limit, a badge will be displayed indicating the number of hidden excess badges.\n *\n */\nexport function BadgeList({ badges, limit, size = BadgeSize.Lg }: Props) {\n  const badgeZIndexMax = badges.length\n  const limitExcess =\n    // TODO: off by one adjustments work, just hard to read, refactor for human eyes 👁️👄👁️\n    limit && (badges.length > limit ? badges.length - limit : 0)\n\n  const maxBadges = limit ? limit - 1 : undefined\n  const showExcessBadge = limitExcess !== undefined && Boolean(limitExcess)\n\n  return (\n    <Container $size={size}>\n      {badges\n        .slice(0, limitExcess ? maxBadges : undefined)\n        .map((badge, index) => (\n          <WithTooltip\n            key={typeof badge.src === 'string' ? badge.src : index}\n            badge={{\n              ...badge,\n              zIndex: badgeZIndexMax - index,\n              size,\n            }}\n          />\n        ))}\n\n      {showExcessBadge && (\n        <div\n          className=\"limit-badge\"\n          style={{ zIndex: badgeZIndexMax, marginLeft: '4px' }}\n        >\n          <Badge\n            title={`+${limitExcess}`}\n            borderColour=\"oatmeal\"\n            size={size}\n            src={<ExcessBadge excess={limitExcess + 1} />}\n            disabled\n          />\n        </div>\n      )}\n    </Container>\n  )\n}\n\ntype ExcessBadgeProps = {\n  excess: number\n}\n\nfunction ExcessBadge({ excess }: ExcessBadgeProps) {\n  return (\n    <ExcessBadgeContainer>\n      <Text typo=\"caption\" style={{ fontWeight: 'bold' }}>\n        +{excess}\n      </Text>\n    </ExcessBadgeContainer>\n  )\n}\n\nconst ExcessBadgeContainer = styled.div`\n  display: flex;\n  align-items: center;\n  place-content: center;\n  width: 100%;\n  height: 100%;\n  background-color: ${theme.colors.oatmeal};\n  pointer-events: none;\n`\n\ntype WithTooltipProps = {\n  badge: BadgeListBadge\n}\n\nconst WithTooltip = ({ badge: { tooltip, ...badge } }: WithTooltipProps) => {\n  if (tooltip) {\n    return (\n      <div style={{ zIndex: badge.zIndex }}>\n        <Tooltip\n          position={tooltip.position ?? 'bottom'}\n          title={tooltip?.title}\n          content={tooltip.content}\n        >\n          <Badge {...badge} />\n        </Tooltip>\n      </div>\n    )\n  }\n\n  return (\n    <div style={{ zIndex: badge.zIndex }}>\n      <Badge {...badge} />\n    </div>\n  )\n}\n\nconst marginRightMapping = {\n  [BadgeSize.Lg]: '-18px',\n  [BadgeSize.Md]: '-14px',\n  [BadgeSize.Sm]: '-11px',\n} satisfies Record<BadgeSize, string>\n\nconst Container = styled.div<{ $size: BadgeSize }>`\n  display: flex;\n\n  > * {\n    transition:\n      margin 0.2s ease-in-out,\n      padding 0.2s ease-in-out;\n    margin-right: ${(props) => marginRightMapping[props.$size]};\n\n    &:hover:not(:first-child):not(.limit-badge) {\n      padding-left: 10px;\n      &:not(:last-child) {\n        padding-right: 5px;\n      }\n    }\n  }\n`\n","import { Meta, StoryObj } from '@storybook/react'\nimport { BadgeList } from './BadgeList'\nimport { BadgeSize } from '../Badge/Badge'\nimport { getExampleImg } from '../Badge/storybook/exampleImg'\n\nconst meta: Meta<typeof BadgeList> = {\n  title: 'BadgeList',\n  component: BadgeList,\n}\n\nexport default meta\n\ntype Story = StoryObj<typeof BadgeList>\n\nconst createTemplateBadge = () => {\n  const { name, src } = getExampleImg()\n\n  return {\n    src,\n    title: name,\n    tooltip: {\n      title: 'This is a tooltip',\n      content: 'This is the content of the tooltip',\n    },\n  }\n}\n\nexport const Primary: Story = {\n  args: {\n    badges: [\n      createTemplateBadge(),\n      { ...createTemplateBadge(), disabled: true },\n      { ...createTemplateBadge(), disabled: true },\n      { ...createTemplateBadge(), disabled: true },\n    ],\n  },\n}\n\nexport const MediumSize: Story = {\n  args: {\n    size: BadgeSize.Md,\n    badges: [\n      createTemplateBadge(),\n      createTemplateBadge(),\n      { ...createTemplateBadge(), disabled: true },\n      { ...createTemplateBadge(), disabled: true },\n      { ...createTemplateBadge(), disabled: true },\n    ],\n  },\n}\n\nexport const SmallSize: Story = {\n  args: {\n    size: BadgeSize.Sm,\n    badges: [\n      createTemplateBadge(),\n      createTemplateBadge(),\n      createTemplateBadge(),\n      { ...createTemplateBadge(), disabled: true },\n      { ...createTemplateBadge(), disabled: true },\n      { ...createTemplateBadge(), disabled: true },\n      { ...createTemplateBadge(), disabled: true },\n    ],\n  },\n}\n\nexport const BadgeFallback: Story = {\n  args: {\n    limit: 5,\n    badges: [\n      { ...createTemplateBadge(), src: '' },\n      { ...createTemplateBadge(), src: 'example/404.jpg' },\n      createTemplateBadge(),\n      createTemplateBadge(),\n      createTemplateBadge(),\n      createTemplateBadge(),\n    ],\n  },\n}\n\nexport const BadgeLimit: Story = {\n  args: {\n    limit: 4,\n    badges: [\n      createTemplateBadge(),\n      { ...createTemplateBadge() },\n      { ...createTemplateBadge() },\n      { ...createTemplateBadge(), disabled: true },\n      { ...createTemplateBadge(), disabled: true },\n      { ...createTemplateBadge(), disabled: true },\n      { ...createTemplateBadge(), disabled: true },\n      { ...createTemplateBadge(), disabled: true },\n    ],\n  },\n}\n"],"names":["cov_1g2y71trl3","path","hash","global","gcv","coverageData","coverage","actualCoverage","BadgeList","badges","limit","size","b","BadgeSize","Lg","f","badgeZIndexMax","s","length","limitExcess","maxBadges","showExcessBadge","Boolean","React","createElement","Container","$size","slice","map","badge","index","WithTooltip","key","src","zIndex","className","style","marginLeft","Badge","borderColour","ExcessBadge","excess","ExcessBadgeContainer","Text","typo","fontWeight","styled","div","theme","colors","oatmeal","meta","title","component","createTemplateBadge","name","getExampleImg","tooltip","content","Primary","args","disabled","MediumSize","Md","SmallSize","Sm","BadgeFallback","BadgeLimit","parameters","docs","source","originalSource"],"mappings":"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"}