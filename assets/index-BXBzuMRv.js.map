{"version":3,"file":"index-BXBzuMRv.js","sources":["../../src/utils/responsiveProp.ts","../../src/utils/space.tsx","../../src/utils/flex.tsx","../../src/Box/Box.tsx","../../src/Box/index.ts"],"sourcesContent":["const breakpointToMinPxMapping = {\n  small: 0,\n  medium: 768,\n  large: 1024,\n} satisfies Record<string, number>\n\ntype Breakpoint = keyof typeof breakpointToMinPxMapping\nconst breakpointList = Object.keys(breakpointToMinPxMapping) as Breakpoint[]\n\ntype PropByBreakpoint<PropValue> = { [key in Breakpoint]?: PropValue }\nexport type ResponsiveProp<PropValue> = PropValue | PropByBreakpoint<PropValue>\n\nconst isPropByBreakpoint = <PropValue>(\n  value: ResponsiveProp<PropValue>,\n): value is PropByBreakpoint<PropValue> => {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    breakpointList.includes(Object.keys(value)[0] as any)\n  )\n}\n\nexport const resolveResponsiveProp = <PropValue>(\n  value: ResponsiveProp<PropValue>,\n  styleTemplate: (value: PropValue) => string,\n) => {\n  if (!isPropByBreakpoint(value)) {\n    return `\n      @media (min-width: ${breakpointToMinPxMapping.small}px) {\n        ${styleTemplate(value)}\n      }\n    `\n  }\n\n  const breakpointUsed = Object.keys(value) as Breakpoint[]\n\n  let style = ''\n  breakpointUsed.forEach((breakpoint) => {\n    style += `\n        @media (min-width: ${breakpointToMinPxMapping[breakpoint]}px) {\n          ${styleTemplate(value[breakpoint]!)}\n        }\n      `\n  })\n\n  return style\n}\n","import { resolveResponsiveProp, ResponsiveProp } from './responsiveProp'\nimport { TransientProps } from './utilTypes'\n\ntype Spacing = '8px' | '12px' | '16px' | '24px' | '32px' | '48px' | '64px'\n\nexport type SpacingProp = '0' | Spacing | { custom: number | string }\n\nexport const resolveSpacing = (value: SpacingProp | 'auto') => {\n  if (typeof value === 'string') {\n    return value\n  }\n\n  if (typeof value.custom === 'string') {\n    return value.custom\n  }\n\n  return `${value.custom}px`\n}\n\nexport interface MarginProps {\n  m?: ResponsiveProp<SpacingProp>\n  mx?: ResponsiveProp<SpacingProp | 'auto'>\n  my?: ResponsiveProp<SpacingProp>\n  ml?: ResponsiveProp<SpacingProp>\n  mr?: ResponsiveProp<SpacingProp>\n  mt?: ResponsiveProp<SpacingProp>\n  mb?: ResponsiveProp<SpacingProp>\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveProp<SpacingProp>\n  px?: ResponsiveProp<SpacingProp>\n  py?: ResponsiveProp<SpacingProp>\n  pl?: ResponsiveProp<SpacingProp>\n  pr?: ResponsiveProp<SpacingProp>\n  pt?: ResponsiveProp<SpacingProp>\n  pb?: ResponsiveProp<SpacingProp>\n}\n\nexport type TransientMarginProps = TransientProps<MarginProps>\nexport type TransientPaddingProps = TransientProps<PaddingProps>\n\nexport const margin = (props: TransientMarginProps): string => {\n  const { $m, $mx, $my, $ml, $mr, $mt, $mb } = props\n\n  return `\n    ${\n      $m\n        ? resolveResponsiveProp(\n            $m,\n            (value) => `margin: ${resolveSpacing(value)};`,\n          )\n        : ''\n    }\n    ${\n      $mx\n        ? resolveResponsiveProp(\n            $mx,\n            (value) => `\n        margin-left: ${resolveSpacing(value)};\n        margin-right: ${resolveSpacing(value)};\n      `,\n          )\n        : ''\n    }\n    ${\n      $my\n        ? resolveResponsiveProp(\n            $my,\n            (value) => `\n        margin-top: ${resolveSpacing(value)};\n        margin-bottom: ${resolveSpacing(value)};\n      `,\n          )\n        : ''\n    }\n    ${\n      $ml\n        ? resolveResponsiveProp(\n            $ml,\n            (value) => `margin-left: ${resolveSpacing(value)};`,\n          )\n        : ''\n    }\n    ${\n      $mr\n        ? resolveResponsiveProp(\n            $mr,\n            (value) => `margin-right: ${resolveSpacing(value)};`,\n          )\n        : ''\n    }\n    ${\n      $mt\n        ? resolveResponsiveProp(\n            $mt,\n            (value) => `margin-top: ${resolveSpacing(value)};`,\n          )\n        : ''\n    }\n    ${\n      $mb\n        ? resolveResponsiveProp(\n            $mb,\n            (value) => `margin-bottom: ${resolveSpacing(value)};`,\n          )\n        : ''\n    }\n  `\n}\n\nexport const padding = (props: TransientPaddingProps): string => {\n  const { $p, $px, $py, $pl, $pr, $pt, $pb } = props\n\n  return `\n    ${\n      $p\n        ? resolveResponsiveProp(\n            $p,\n            (value) => `padding: ${resolveSpacing(value)};`,\n          )\n        : ''\n    }\n    ${\n      $px\n        ? resolveResponsiveProp(\n            $px,\n            (value) => `\n        padding-left: ${resolveSpacing(value)};\n        padding-right: ${resolveSpacing(value)};\n      `,\n          )\n        : ''\n    }\n    ${\n      $py\n        ? resolveResponsiveProp(\n            $py,\n            (value) => `\n        padding-top: ${resolveSpacing(value)};\n        padding-bottom: ${resolveSpacing(value)};\n      `,\n          )\n        : ''\n    }\n    ${\n      $pl\n        ? resolveResponsiveProp(\n            $pl,\n            (value) => `padding-left: ${resolveSpacing(value)};`,\n          )\n        : ''\n    }\n    ${\n      $pr\n        ? resolveResponsiveProp(\n            $pr,\n            (value) => `padding-right: ${resolveSpacing(value)};`,\n          )\n        : ''\n    }\n    ${\n      $pt\n        ? resolveResponsiveProp(\n            $pt,\n            (value) => `padding-top: ${resolveSpacing(value)};`,\n          )\n        : ''\n    }\n    ${\n      $pb\n        ? resolveResponsiveProp(\n            $pb,\n            (value) => `padding-bottom: ${resolveSpacing(value)};`,\n          )\n        : ''\n    }\n  `\n}\n","import { resolveResponsiveProp, ResponsiveProp } from './responsiveProp'\nimport { resolveSpacing, SpacingProp } from './space'\nimport { TransientProps } from './utilTypes'\n\ntype FlexFN = (arg: TransientFlexProps) => string\n\nexport interface FlexProps {\n  direction?: ResponsiveProp<\n    'column' | 'column-reverse' | 'row' | 'row-reverse'\n  >\n  wrap?: 'nowrap' | 'wrap' | 'wrap-reverse'\n  flex?: boolean\n  flow?: string\n  justifyContent?: ResponsiveProp<\n    | 'center'\n    | 'flex-end'\n    | 'flex-start'\n    | 'space-around'\n    | 'space-between'\n    | 'space-evenly'\n  >\n\n  alignItems?: ResponsiveProp<\n    'baseline' | 'center' | 'flex-end' | 'flex-start' | 'stretch'\n  >\n  alignContent?: ResponsiveProp<\n    | 'center'\n    | 'flex-end'\n    | 'flex-start'\n    | 'space-around'\n    | 'space-between'\n    | 'stretch'\n  >\n  gap?: ResponsiveProp<SpacingProp>\n  rowGap?: ResponsiveProp<SpacingProp>\n  columnGap?: ResponsiveProp<SpacingProp>\n}\n\nexport type TransientFlexProps = TransientProps<FlexProps>\n\nexport const flex: FlexFN = (props: TransientFlexProps) => {\n  const {\n    $flex,\n    $direction,\n    $wrap,\n    $flow,\n    $justifyContent,\n    $alignItems,\n    $alignContent,\n    $gap,\n    $columnGap,\n    $rowGap,\n  } = props\n\n  return `\n    ${$flex ? `display: flex;` : ''}\n    ${\n      $direction\n        ? resolveResponsiveProp(\n            $direction,\n            (value) => `flex-direction: ${value};`,\n          )\n        : ''\n    }\n    ${$wrap ? `flex-wrap: ${$wrap};` : ''}\n    ${$flow ? `flex-flow: ${$flow};` : ''}\n    ${\n      $justifyContent\n        ? resolveResponsiveProp(\n            $justifyContent,\n            (value) => `justify-content: ${value};`,\n          )\n        : ''\n    }\n    ${\n      $alignItems\n        ? resolveResponsiveProp(\n            $alignItems,\n            (value) => `align-items: ${value};`,\n          )\n        : ''\n    }\n    ${\n      $alignContent\n        ? resolveResponsiveProp(\n            $alignContent,\n            (value) => `align-content: ${value};`,\n          )\n        : ''\n    }\n    ${\n      $gap\n        ? resolveResponsiveProp(\n            $gap,\n            (value) => `gap: ${resolveSpacing(value)};`,\n          )\n        : ''\n    }\n    ${\n      $columnGap\n        ? resolveResponsiveProp(\n            $columnGap,\n            (value) => `column-gap: ${resolveSpacing(value)};`,\n          )\n        : ''\n    }\n    ${\n      $rowGap\n        ? resolveResponsiveProp(\n            $rowGap,\n            (value) => `row-gap: ${resolveSpacing(value)};`,\n          )\n        : ''\n    }\n  `\n}\n","import React, { ElementType, HTMLAttributes, forwardRef } from 'react'\nimport styled from 'styled-components'\nimport { FlexProps, TransientFlexProps, flex } from '../utils/flex'\nimport { MeasureProps, TransientMeasureProps, measure } from '../utils/measure'\nimport {\n  MarginProps,\n  PaddingProps,\n  TransientMarginProps,\n  TransientPaddingProps,\n  margin,\n  padding,\n} from '../utils/space'\n\nexport type BoxProps = MarginProps &\n  PaddingProps &\n  FlexProps &\n  MeasureProps &\n  HTMLAttributes<HTMLElement> & {\n    as?: ElementType\n    forwardedAs?: ElementType\n  }\n\nexport type TransientBoxProps = TransientMarginProps &\n  TransientPaddingProps &\n  TransientFlexProps &\n  TransientMeasureProps\n\nexport const Box = forwardRef<HTMLDivElement, BoxProps>(\n  ({ children, ...props }, ref) => {\n    const {\n      m,\n      mx,\n      my,\n      ml,\n      mr,\n      mt,\n      mb,\n      p,\n      px,\n      py,\n      pl,\n      pr,\n      pt,\n      pb,\n      direction,\n      wrap,\n      flex,\n      flow,\n      justifyContent,\n      alignItems,\n      alignContent,\n      gap,\n      rowGap,\n      columnGap,\n      width,\n      maxWidth,\n      minWidth,\n      height,\n      maxHeight,\n      minHeight,\n      ...otherProps\n    } = props\n\n    return (\n      <CustomBox\n        ref={ref}\n        $m={m}\n        $mx={mx}\n        $my={my}\n        $ml={ml}\n        $mr={mr}\n        $mt={mt}\n        $mb={mb}\n        $p={p}\n        $px={px}\n        $py={py}\n        $pl={pl}\n        $pr={pr}\n        $pt={pt}\n        $pb={pb}\n        $direction={direction}\n        $wrap={wrap}\n        $flex={flex}\n        $flow={flow}\n        $justifyContent={justifyContent}\n        $alignItems={alignItems}\n        $alignContent={alignContent}\n        $gap={gap}\n        $rowGap={rowGap}\n        $columnGap={columnGap}\n        $width={width}\n        $maxWidth={maxWidth}\n        $minWidth={minWidth}\n        $height={height}\n        $maxHeight={maxHeight}\n        $minHeight={minHeight}\n        {...otherProps}\n      >\n        {children}\n      </CustomBox>\n    )\n  },\n)\nBox.displayName = 'Box'\n\nexport const CustomBox = styled.div<TransientBoxProps>`\n  ${margin};\n  ${padding};\n  ${flex};\n  ${measure};\n`\n","export { Box } from './Box'\n"],"names":["breakpointToMinPxMapping","cov_22pac96tfs","s","small","medium","large","breakpointList","Object","keys","isPropByBreakpoint","value","f","b","includes","resolveResponsiveProp","styleTemplate","cov_1kggcdeejx","resolveSpacing","custom","margin","props","$m","$mx","$my","$ml","$mr","$mt","$mb","cov_1sph7qwcpp","flex","$direction","$wrap","$flow","$alignItems","$alignContent","cov_2b8j7ajgca","path","hash","global","gcv","coverageData","coverage","actualCoverage","children","ref","m","mx","my","ml","mr","mt","mb","p","px","py","pl","pr","pt","pb","direction","wrap","flex2","flow","justifyContent","alignItems","alignContent","gap","rowGap","columnGap","width","maxWidth","minWidth","height","maxHeight","minHeight","otherProps","React","createElement","CustomBox","$p","$px","$py","$pl","$pr","$pt","$pb","$flex","$justifyContent","$gap","$rowGap","$columnGap","cov_2eqpexy6t5"],"mappings":"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"}